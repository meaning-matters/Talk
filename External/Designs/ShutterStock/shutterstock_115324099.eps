%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 15.0.0
%%For: (user) ()
%%Title: (6.eps)
%%CreationDate: 10/7/2012 9:11 PM
%%Canvassize: 16383
%%BoundingBox: 377 -2948 2934 -359
%%HiResBoundingBox: 377.166 -2947.3477 2933.1465 -359.9297
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%RGBProcessColor: 0 0 0 ([\721\756\742\754\745\771\745\755\750\745])
%%+ 0.4 0.4 0.4 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 7)
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 1650.5 -1650.5 1650.5 -1650.5
%AI3_TileBox: 1352.3398 -2070.96 1947.6602 -1229.04
%AI3_DocumentPreview: Header
%AI5_ArtSize: 3300 3300
%AI5_RulerUnits: 6
%AI5_ArtFlags: 0 0 0 1 0 0 0 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -1991 309.1758 0.17 1238 596 18 0 0 73 119 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:1250 -1950
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Tracing Object) (\322\360\340\361\361\350\360\356\342\352\340) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe Envelope) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\301\373\361\362\360\340\377 \347\340\353\350\342\352\340") (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\317\345\360\345\365\356\344") (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (\310\355\361\362\360\363\354\345\355\362\340\360\350\351 Adobe \357\356 \360\340\341\356\362\345 \361 \361\350\354\342\356\353\340\354\350) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\323\347\356\360\367\340\362\340\377 \352\350\361\362\374") (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\323\347\356\360\367\340\362\340\377 \352\350\361\362\374") (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\316\341\372\345\352\362\355\340\377 \352\350\361\362\374") (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\316\341\372\345\352\362\355\340\377 \352\350\361\362\374") (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\312\340\353\353\350\343\360\340\364\350\367\345\361\352\340\377 \352\350\361\362\374") (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (\317\356\361\362\360\356\367\355\373\351 \352\356\354\357\356\355\356\342\371\350\352 Adobe) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (\317\356\361\362\360\356\367\355\373\351 \352\356\354\357\356\355\356\342\371\350\352 Adobe) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (\321\356\361\362\340\342\355\373\345 \364\350\343\363\360\373 Adobe) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
7 Bn
%AI5_BeginGradient: (Unnamed gradient 11)
(Unnamed gradient 11) 0 3 Bd
[
0.000031
<
A7A7A8A7A8A8A9A9AAAAAAABABACACADADADAEAEAFAFB0B0B1B1B1B2B2B3B3B4B3B4B4B4B5B5B6B6
B7B7B7B8B8B9B9BABABABABABBBBBCBCBDBDBEBEBEBEBEBFBFC0C0C0C1C1C2C1C2C2C3C3
>
<
090B0C0E0F1112141517191A1C1D1F2022242527282A2B2D2E303233353638393B3C3E4041434649
4A4C4E4F5152545557585A5C5D5F6061636566686A6B6D6E707173757678797B7C7E7F81
>
0.000031
1
<
7B7B7A7A79797878777777767675757474747373727271717070706F6F6E6E6D6D6C6C6C6B6B6A6A
69696968686767666665656564646363626261616160605F5F5E5E5E5D5D5C5C5B5B5A5A
>
<
ACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988878584
838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
>
4 %_Br
0.000031
<
8282828484848484848585858585868787878787878888888888898A8A8A8A8A8A8C8C8C8C8C8C8D
8D8D8E8E8E8F8F8F8F8F8F9191919191919393939393939495959595959696979797989898999999
9A9A9A9A9A9A9C9C9C9C9C9C9D9D9D9D9D9D9E9E9F9F9F9FA0A0A0A0A0A0A1A1A1A1A1A1A2A2A2A2
A2A2A3A3A3A3A3A3A4A4A4A4A4A4A5A5A5A5A5A5A7A7A7
>
<
E1E1E0DFDFDEDDDDDCDBDAD9D8D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C3C2C1C0BFBEBD
BCBBB9B8B6B5B4B3B2B1B0AFAEACABAAA9A7A5A4A2A1A09E9D9C9A999796949392908F8D8B8A8886
8482817F7E7C7A78777573716F6D6C6A68666362605E5D5B5957555352504D4B49474543403E3C3A
38373432302E2C2A272523211F1D1B18161412100D0B09
>
0.000031
1
<
9393939292929292929191919191919090909090908F8F8F8F8F8F8E8E8E8E8E8E8D8D8D8D8D8D8C
8C8C8C8C8C8B8B8B8B8B8B8A8A8A8A8A8A8989898989898888888888888787878787868686868686
8585858585858484848484848383838383838282828282828181818181818080808080807F7F7F7F
7F7F7E7E7E7E7E7E7D7D7D7D7D7D7C7C7C7C7C7C7B7B7B
>
<
1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445
464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D
6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495
969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABAC
>
4 %_Br
[
0.000031 0.764614 0.505638 0.000031 1 0.352941 0.376471 2 50 100 %_BS
%_0.000031 0.764614 0.505638 0.000031 1 0.352941 0.376471 2 50 100 Bs
0.000031 0.654047 0.033753 0.000031 1 0.482353 0.67451 2 50 61.7977 %_BS
%_0.000031 0.654047 0.033753 0.000031 1 0.482353 0.67451 2 50 61.7977 Bs
0.000031 0.510887 0.883848 0.000031 1 0.576471 0.117647 2 50 0 %_BS
%_0.000031 0.510887 0.883848 0.000031 1 0.576471 0.117647 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 139)
(Unnamed gradient 139) 1 2 Bd
[
0.000031
0.000031
0.000031
0.000031
1
1
1
4 %_Br
[
0.000031 0.000031 0.000031 0.000031 1 1 1 2 87 36.6667 %_BS
%_0.000031 0.000031 0.000031 0.000031 1 1 1 2 87 36.6667 Bs
0.000031 0.000031 0.000031 0.000031 1 1 1 2 50 100 %_BS
%_0.000031 0.000031 0.000031 0.000031 1 1 1 2 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 3)
(Unnamed gradient 3) 0 2 Bd
[
<
0000010304050608090B0C0D0F1011121314151718191A1B1C1E1F21222324252728292A2B2C2D2E
2F3031323435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5050515253545556
5758595A5B5C5D5D5E5F5F6061626263646565666768696A6A6B6C6E6F7070717273747475767777
78797A7A7B7C7D7E7E7F808181828383848585868687888889898A8B8B8C8D8D8E8F8F9090919292
93949495959697979899999A9B9B9C9C9D9E9E9F9FA0A1A2A2A3A4A5A5A6A7A8A8A9AAAAABABACAD
ADAEAFB0B0B1B1B2B3B4B4B5B6B6B7B8B9B9BABBBCBDBDBEBFBFC0C1C1C2C3C4C5C6C7C8C9C9CACC
CED0D1D2D4D5D7D8DADCDEE0E3E5E7E9
>
<
00000102030405060708090A0A0B0C0C0D0E0F1011111213141516171819191A1B1B1C1D1E1F2020
2122232425262728292A2B2C2C2D2E2E2F303131323334353637373839393A3B3C3C3D3E3E3F4041
424243444546474748494A4B4B4C4D4D4E4E4F4F505152525354555657575859595A5B5B5C5C5D5D
5E5F5F60616162636364656667676869696A6A6B6C6C6D6E6E6F6F70707172727374747576767778
79797A7B7C7C7D7E7F7F80808182828384858586878888898A8A8B8C8C8D8E8E8F90919192939494
959697979898999A9B9B9C9D9D9E9FA0A0A1A2A3A3A4A5A6A6A7A7A8A9AAABACADAEAFB0B1B1B2B3
B5B6B7B8B9BABCBDBEC0C1C3C4C6C7C9
>
<
000001020304050708090A0B0C0D0E0F10111112131415161718191A1B1C1C1D1E1F202121222323
2425262728292A2B2C2D2D2E2F2F3031323233343536373738393A3B3B3C3D3D3E3F404041424243
44444546464748494A4A4B4C4D4D4E4E4F505051515253535454555657575859595A5B5B5C5C5D5D
5E5F5F606161626263636465656667676869696A6A6B6C6C6D6D6E6F6F7070717272737474757676
777778787879797A7B7B7C7D7D7E7E7F7F80808181828283838485858687878888898A8A8B8C8C8D
8D8E8E8E8F8F8F909091919293939494959596969798989999999A9A9B9B9B9B9C9C9C9C9C9D9D9D
9D9D9D9D9D9D9D9D9E9E9E9E9E9E9E9E
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000001
01010101010101020202020202030303040404050506060607070808080909090A0A0A0B0B0C0C0D
0D0E0F0F1011121213131414151616171819191A1B1B1C1D1E1E1F202122232425262728292A2B2C
2D2E2E2F3031323435363738393A3B3D3E3F40414344454647494A4B4C4E4F505253555658595B5C
5E5F6162646567686A6B6D6F7072737577787A7B7D7F8082848688898B8D8F91939496989A9C9E9F
A1A3A5A6A7A9AAACAEB0B2B3B5B7B9BBBDBFC1C3C5C7C9CACBCDCED0D1D3D5D7D9DADCDEDFE1E2E4
E5E7E8E9E9EBECEDEEF0F1F3F4F6F7F9
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
4 %_Br
[
0.912474 0.787625 0.619837 0.97467 0 0 0 2 50 100 %_BS
%_0.912474 0.787625 0.619837 0.97467 0 0 0 2 50 100 Bs
0.000031 0.000031 0.000031 0.000031 1 1 1 2 50 0 %_BS
%_0.000031 0.000031 0.000031 0.000031 1 1 1 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\702\750\755\774\745\762\752\740 \750\747 \755\745\756\755\756\742\773\765 \752\756\753\745\766)
(\702\750\755\774\745\762\752\740 \750\747 \755\745\756\755\756\742\773\765 \752\756\753\745\766) 1 17 Bd
[
0.775784
0.750057
0.593927
0.901884
0.07451
0.047059
0.054902
4 %_Br
<
C6C7C9CACBCDD3D5D6DADCDDDEE2E3E4E4E7E8E8EBEAEAEAECEDEDEFF0F0F2F4F4F5F6F6F6F5F6F6
F5F5F7F7F6F7F7F6F6F6F6F5F6F5F5F5F6F5F5F6F5F5F5F6F6F5F5F6F5F4F5F5F4F3F4F4F3F4F3F2
F1F2F1F0F1F0F0EFF0EFEFEEEFEEEDEEEDEDECECECEBECEBEAEAEAE9E9E9E9E8E7E8E7E7E6E6E5E5
E5E4E4E3E3E3E2E2E1E1E0E0DFDFDFDEDEDDDDDDDCDBDCDBDADADAD9D9D9D8D8D8D7D6D6D6D5D5D5
D4D4D3D3D3D2D2D2D1D1D1D0D0CFCFCFCECECECDCCCCCCCBCBCBCAC9C9C9C8C7C7C7C6C6C6C5C4C4
C4C3C3C2C2C1C1C0BFBFBEBDBCBCBCBBBABABAB9B9B8B7B7B6B6
>
<
BFBEC1C1BFBEC1C0BFC3C2C1BFC3C2C0BEC2BFBDC0BEBCBABDBBBABDBCBAB9BBBAB9BBBAB8B6B9B7
B5B3B5B4B2B4B3B1AFB2B0AEB0AEACABACABAAACAAA9A8AAA9A7A5A7A5A4A6A4A3A1A3A1A0A1A09E
9D9E9D9B9D9B9998999896959695939593929092908F908E8D8B8D8B898B89878687858482838281
82807F7D7E7D7B7C7A7977787776777574727371706F6F6E6C6D6C6A696968666766646263626061
5F5E5C5D5C5A5859575657555452535150504E4D4B4C4A484947464444434140403E3D3D3C3A3839
373636343331312F2E2E2D2B2A2A292726262524242322202120
>
<
97989696979796969694949494939292929091918F8F8F8F8D8D8D8B8B8B8B8A8989888787878585
85848383828180807F7E7D7D7B7B7A7A79787876767676747473737171706F6E6E6D6B6B6A696868
6766656563636262616060605E5E5D5C5B5B5A59585857565655545353515150504E4E4D4D4B4B4A
494847474645454343424240403F3E3D3D3C3B3A3A39373736353434333131302F2F2E2E2C2C2B2A
29282826262524222221201F1F1E1C1C1C19191818161515131212110F0F0E0D0B0B0A0808070705
0404020101000000000000000000000000000000000000000000
>
<
E6E5E3E2E0DFDDDBDAD8D6D4D3D0CFCDCBC9C7C5C3C1BFBDBBB9B7B5B3B2B0AEADABA9A7A5A3A19F
9D9C9998969392908E8C8A88868482807E7C7B7877767572716F6E6B6968656462615E5D5C595856
555352504E4D4B4A484746444241403E3D3C3B39383735343332302F2F2D2C2B2A28272726242323
21201F1F1D1D1C1A1A191817161615141413121111100F0F0F0D0D0D0C0C0B0B0A0A090908080807
07070706060505040404030303020202010101010101010100000000000000000000000000000000
0000000000000000000000000000000000000000000000000000
>
<
13131313131312121212121212121212121211111111111111111111111110101010101010101010
10100F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0C0C0C
0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A09090909090909
09090909090808080808080808080808080707070707070707070707070606060606060606060606
05050505050505050505050504040404040404040404040403030303030303030303030302020202
0202020202020202010101010101010101010101000000000000
>
<
0C0D0D0E0F10101112121314151516171818191A1A1B1C1D1D1E1F1F202122222324242526272728
292A2A2B2C2C2D2E2F2F30313132333434353636373839393A3B3C3C3D3E3E3F4041414243434445
4646474848494A4B4B4C4D4E4E4F50505152535354555556575858595A5A5B5C5D5D5E5F60606162
626364656566676768696A6A6B6C6C6D6E6F6F70717272737474757677777879797A7B7C7C7D7E7E
7F80818182838484858686878889898A8B8B8C8D8E8E8F90909192939394959696979898999A9B9B
9C9D9D9E9FA0A0A1A2A2A3A4A5A5A6A7A8A8A9AAAAABACADADAE
>
<
0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435
363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D
5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485
868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACAD
AEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5
D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
>
4 %_Br
<
B6B6B5B5B5B5B5B5B4B4B4B4B4B3B3B3B3B3B3B2B2B2B2B2B1B1B1B0B0B0B0B0AFAFAFAFAEAEAEAD
ADACACACABABABAAAAAAA9A9A9A8A8A7A7A7A6A6A6A5A5A5A4A4A3A3A3A2A2A1A1A09F9F9E9E9E9D
9D9C9C9B9A9A9999989797979695959594939393929190908F8F8E8D8D8C8B8A8A89888887868685
84848382828180807F7E7E7D7C7B7B7A797978777776757473737271706F6E6E6D6C6B6A69686766
656463626160605F5E5D5C5B5B5A59585756555453535251504F4E4D4C
>
<
20201E1E1E1E1C1C1D1B1B1B19191919171717151515131314151213131111110E0F0F0F0C0D0D0A
0B0C09090A0A07080805060606040406040404020202030001010000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000001000000000000010100020201010302000202010302020203030203030304040101
02020203030204040303040404050303040403030404040505040405050304040304040403040403
0404040504020203030204030304030302030303040101020201010202
>
0.000031
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBC
>
<
AEAEAFAFAFAFB0B0B0B1B1B1B2B2B2B2B3B3B3B4B4B4B5B5B5B5B6B6B6B7B7B7B8B8B8B8B9B9B9BA
BABABBBBBBBBBCBCBCBDBDBDBDBEBEBEBFBFBFC0C0C0C0C1C1C1C2C2C2C3C3C3C3C4C4C4C5C5C5C6
C6C6C6C7C7C7C8C8C8C9C9C9C9CACACACBCBCBCBCCCCCCCDCDCDCECECECECFCFCFD0D0D0D1D1D1D1
D2D2D2D3D3D3D4D4D4D4D5D5D5D6D6D6D7D7D7D7D8D8D8D9D9D9D9DADADADBDBDBDCDCDCDCDDDDDD
DEDEDEDFDFDFDFE0E0E0E1E1E1E2E2E2E2E3E3E3E4E4E4E5E5E5E5E6E6
>
<
EFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1
F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4
F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7
F7F7F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9F9F9
F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFB
>
4 %_Br
<
4C4D4E4F50515253535455565758595A5B5B5C5D5E5F60606162636465666768696A6B6C6D6E6E6F
707172737374757677777879797A7B7B7C7D7E7E7F8080818282838484858686878888898A8A8B8C
8D8D8E8F8F9090919293939394959595969797979899999A9A9B9C9C9D9D9E9E9E9F9FA0A1A1A2A2
A3A3A3A4A4A5A5A5A6A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACACADADAEAEAEAFAFAFAFB0B0B0
B0B0B1B1B1B2B2B2B2B2B3B3B3B3B3B3B4B4B4B4B4B5B5B5B5B5B5B6B6
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000001010003020202040404060404060606050808070A0A09090C0B0A0D0D0C0F0F0F0E111111
13131215141313151515171717191919191B1B1B1D1C1C1E1E1E1E2020
>
<
02020101020201010403030302030304030304020303020204050404040304040304040403040403
05050404050504040403030404030305040404030304040203030202020101040403030302030302
02020301020200020301010202000101000000000000010000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000
>
0.000031
<
BCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A9998979695
94939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D
6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A4948474645
44434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D
1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100
>
<
E6E6E5E5E5E5E4E4E4E3E3E3E2E2E2E2E1E1E1E0E0E0DFDFDFDFDEDEDEDDDDDDDCDCDCDCDBDBDBDA
DADAD9D9D9D9D8D8D8D7D7D7D7D6D6D6D5D5D5D4D4D4D4D3D3D3D2D2D2D1D1D1D1D0D0D0CFCFCFCE
CECECECDCDCDCCCCCCCBCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C6C6C6C6C5C5C5C4C4C4C3C3C3C3
C2C2C2C1C1C1C0C0C0C0BFBFBFBEBEBEBDBDBDBDBCBCBCBBBBBBBBBABABAB9B9B9B8B8B8B8B7B7B7
B6B6B6B5B5B5B5B4B4B4B3B3B3B2B2B2B2B1B1B1B0B0B0AFAFAFAFAEAE
>
<
FBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9
F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F6F6
F6F6F6F6F6F6F6F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F3F3
F3F3F3F3F3F3F3F3F3F3F3F3F3F3F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F1F1F1F1F1F1F1F1F1F1F1
F1F1F1F1F1F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0EFEFEFEFEFEFEFEF
>
4 %_Br
<
B6B6B7B7B8B9B9BABABABBBCBCBCBDBEBFBFC0C1C1C2C2C3C3C4C4C4C5C6C6C6C7C7C7C8C9C9C9CA
CBCBCBCCCCCCCDCECECECFCFCFD0D0D1D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D6D7D8D8D8D9D9D9DA
DADADBDCDBDCDDDDDDDEDEDFDFDFE0E0E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E8E7E8E9E9E9E9EA
EAEAEBECEBECECECEDEDEEEDEEEFEEEFEFF0EFF0F0F1F0F1F2F1F2F3F4F3F4F4F3F4F5F5F4F5F6F5
F5F6F6F5F5F5F6F5F5F6F5F5F5F6F5F6F6F6F6F7F7F6F7F7F5F5F6F6F5F6F6F6F5F4F4F2F0F0EFED
EDECEAEAEAEBE8E8E7E4E4E3E2DEDDDCDAD6D5D3CDCBCAC9C7C6
>
<
2021202223242425262627292A2A2B2D2E2E2F3131333436363739383A3C3D3D3E40404143444446
4749484A4C4B4D4E5050515352545557565759585A5C5D5C5E5F6160626362646667666869696A6C
6D6C6E6F6F7071737274757776777877797A7C7B7D7E7D7F8082818283828485878687898B898B8D
8B8D8E908F9092909293959395969596989998999B9D9B9D9E9D9EA0A1A0A1A3A1A3A4A6A4A5A7A5
A7A9AAA8A9AAACAAABACABACAEB0AEB0B2AFB1B3B4B2B4B5B3B5B7B9B6B8BABBB9BABBB9BABCBDBA
BBBDBABCBEC0BDBFC2BEC0C2C3BFC1C2C3BFC0C1BEBFC1C1BEBF
>
<
000000000000000000000000000000000000000000010102040405070708080A0B0B0D0E0F0F1112
1213151516181819191C1C1C1E1F1F20212222242526262828292A2B2C2C2E2E2F2F303131333434
35363737393A3A3B3C3D3D3E3F404042424343454546474748494A4B4B4D4D4E4E50505151535354
555656575858595A5B5B5C5D5E5E6060606162626363656566676868696A6B6B6D6E6E6F70717173
737474767676767878797A7A7B7B7D7D7E7F808081828383848585858787878889898A8B8B8B8B8D
8D8D8F8F8F8F9191909292929394949494969696979796969897
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000101010101010101020202030303040404050506060707070708080809090A0A0B0B0C0C0D0D
0D0F0F0F101111121314141516161718191A1A1C1D1D1F1F2021232324262727282A2B2C2D2F2F30
323334353738393B3C3D3E404142444647484A4B4D4E505253555658595C5D5E6162646568696B6E
6F7172757677787B7C7E80828486888A8C8E9092939698999C9D9FA1A3A5A7A9ABADAEB0B2B3B5B7
B9BBBDBFC1C3C5C7C9CBCDCFD0D3D4D6D8DADBDDDFE0E2E3E5E6
>
<
00000000000001010101010101010101010102020202020202020202020203030303030303030303
03030404040404040404040404040505050505050505050505050606060606060606060606070707
0707070707070707070808080808080808080808080909090909090909090909090A0A0A0A0A0A0A
0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D
0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F10101010101010101010101011111111
1111111111111111121212121212121212121212131313131313
>
<
AEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A0A09F9E9D9D9C9B9B9A9998989796969594939392
9190908F8E8E8D8C8B8B8A89898887868685848483828181807F7E7E7D7C7C7B7A79797877777675
747473727271706F6F6E6D6C6C6B6A6A69686767666565646362626160605F5E5D5D5C5B5A5A5958
5857565555545353525150504F4E4E4D4C4B4B4A49484847464645444343424141403F3E3E3D3C3C
3B3A39393837363635343433323131302F2F2E2D2C2C2B2A2A292827272625242423222221201F1F
1E1D1D1C1B1A1A19181817161515141312121110100F0E0D0D0C
>
<
EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8
C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A0
9F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A7978
77767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525150
4F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928
27262524232221201F1E1D1C1B1A191817161514131211100F0E
>
4 %_Br
0.775784
0.750057
0.593927
0.901884
0.07451
0.047059
0.054902
4 %_Br
<
C6C3C2BFBCB9B8B5B5B2B2AEAEABABA8AAA7A8A3A4A1A19E9F9C9A9797949491918E8E8B8C898A88
888585838381817F7E7B7B79787676747472727171706F6E6E6C6C6B6B6969686866666565636362
62616160605F5F5E5E5D5D5C5B5A5A595A59595858575756565555545453535252515150504F4F4E
4E4D4D4C4C4C4B4B4A49494949484847474646454544444343424140403F3E3D3D3C3C3B3B3A3A39
3838373636353433323131302F2E2E2D2C2C2B2A292827262524232221201F1E1C1B1A1817161413
12100F0D0B0A0807050403010000000000000000
>
<
BFC0C3C3C3C4C7C8CBCCCFCCCFCFD2D1D3D3D5D2D4D4D6D6D7D8D8D8DBDCDEDFE1DFE1E1E3E3E5E5
E6E4E6E6E7E7E8E8E8E9EAEBEDEDEEEDEEEEEFEFF0F0F1EFF0F0F1F1F2F2F1F2F2F3F3F4F5F4F5F5
F6F6F6F6F5F5F5F5F6F6F6F7F6F6F6F7F7F7F7F6F6F6F7F7F7F7F6F6F6F6F7F7F7F7F6F6F6F6F6F6
F7F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F5F5F5F5F5F6F6F5F5F5F5F5F5F5F5F4F4
F4F4F4F5F5F4F4F4F4F4F4F4F3F3F3F3F2F2F2F2F2F2F2F2F2F2F2F1F1F1F0F0F0F0EFEFEFEFEFEF
EEEEEDEDEDEDEDECECECEBEBEBEBEAEAE9E9E9E8
>
<
97979594949491918F8E8C8E8B8B89898887868685858383828181807F7F7D7D7B7C7A7A79797877
7677767674747373727370716F6F6E706D6E6C6E6B6D6B6D6B6C6A6B696A6A6B696A686967696769
67686667666866676566646564666465636463656364636462636364626362626162616260615F60
5F605F605E5F5D5E5D5E5D5D5C5D5B5C5B5C5B5B5A5B595A595A5858575756575556545554555454
53545253515250514F504E4E4D4E4C4D4B4C4A4B4949474745454344424340413E3F3D3D3B3C3939
37383636333431312F302E2E2B2C2A2A28292627
>
<
E6E6E5E5E3E3E1E1DFDFDEDEDCDCDADAD8D8D6D6D4D4D2D2D0D0CECECCCBC9C9C7C7C5C5C3C3C1C1
BFBFBDBDBBBBB8B8B6B5B3B3B1B0AEADACABA9A8A6A5A4A3A1A09E9D9B9A98979695939291908E8E
8C8B898886858382807F7D7C7A797876757472716F6E6C6B696866656362605F5D5C5B5A58575554
52514F4E4C4B49484645434240403E3D3C3B3939373635343231302F2D2C2B2A2827262524232120
1F1E1D1C1A191817161514131211100F0E0E0D0C0B0B0A0A09080807060605050404040303030202
0202020101010101010100000000000000000000
>
<
131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A
3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162
636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A
8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2
B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DA
DBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEE
>
<
0C0C0C0C0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F1010101010101011111111111111
11121212121212121313131313131314141414141414141515151515151516161616161616171717
171717171818181818181818191919191919191A1A1A1A1A1A1A1B1B1B1B1B1B1B1B1C1C1C1C1C1C
1C1D1D1D1D1D1D1D1E1E1E1E1E1E1E1E1F1F1F1F1F1F1F2020202020202021212121212121222222
22222222222323232323232324242424242424252525252525252526262626262626272727272727
272828282828282828292929292929292A2A2A2A
>
<
0E0E0F0F10101111121213131414151516161717181819191A1A1B1B1C1C1D1D1E1E1F1F20202121
222223232424252526262727282829292A2A2B2B2C2C2D2D2E2E2F2F303031313232333334343535
36363737383839393A3A3B3B3C3C3D3D3E3E3F3F4040414142424343444445454646474748484949
4A4A4B4B4C4C4D4D4E4E4F4F50505151525253535454555556565757585859595A5A5B5B5C5C5D5D
5E5E5F5F60606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171
727273737474757576767777787879797A7A7B7B
>
4 %_Br
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000100010101020202030403040404050505050505050505050506050607060809090909
090A0A0A0B0A0B0B0B0B0C0B0E0E0E0F0E0F0F0F0F0F0F0F0E0E0F0E0F1111111212121212121212
1313131313151515151515161616
>
<
E8E8E7E7E6E5E4E4E3E2E2E1E0E0DFDFDEDDDDDCDBDADAD9D8D7D7D6D5D4D4D3D2D1D1D0CFCECECD
CCCBCAC9C9C8C7C6C5C5C4C3C2C1C0BFBEBCBBBAB9B9B8B7B6B5B4B3B2B0AFAEADACACAAA9A9A8A7
A6A4A3A2A1A09F9E9D9C9B9A9997969594939291908F8E8C8B8988878684838281807E7D7C7B7A79
787675747371706F6E6C6B6A6867
>
<
27252523212220211F1D1E1C1A1B1A18191716171516141314121112100E100E0F0D0C0D0B0A0B09
08090809070607060406040305040304030403020302000201000100010000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000100000100
0001000001010001010202010202
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000
>
<
EEEEEEEEEEEEEEEEEEEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDECECECECECECECECECECECECECECEC
ECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9
E9E9E9E9E9E9E9E9E9E9E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E7E7E7E7E7E7E7E7E7E7E7
E7E7E7E7E7E6E6E6E6E6E6E6E6E6
>
<
2A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5051
52535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F70717273747576777879
7A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1
A2A3A4A5A6A7A8A9AAABACADAEAF
>
<
7B7C7C7D7E7E7F7F8081818283838485858687878888898A8A8B8C8C8D8E8E8F8F90919192939394
95959696979898999A9A9B9C9C9D9E9E9F9FA0A1A1A2A3A3A4A5A5A6A6A7A8A8A9AAAAABACACADAD
AEAFAFB0B1B1B2B3B3B4B5B5B6B6B7B8B8B9BABABBBCBCBDBDBEBFBFC0C1C1C2C3C3C4C4C5C6C6C7
C8C8C9CACACBCCCCCDCDCECFCFD0
>
4 %_Br
<
161616151515151515131313131312121212121212121111110F0E0F0E0E0F0F0F0F0F0F0F0E0F0E
0E0E0B0C0B0B0B0B0A0B0A0A0A090909090908060706050605050505050505050505050404040304
03020202010101000100000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000
>
<
67686A6B6C6E6F70717374757678797A7B7C7D7E8081828384868788898B8C8E8F90919293949596
97999A9B9C9D9E9FA0A1A2A3A4A6A7A8A9A9AAACACADAEAFB0B2B3B4B5B6B7B8B9B9BABBBCBEBFC0
C1C2C3C4C5C5C6C7C8C9C9CACBCCCDCECECFD0D1D1D2D3D4D4D5D6D7D7D8D9DADADBDCDDDDDEDFDF
E0E0E1E2E2E3E4E4E5E6E7E7E8E8
>
<
02020102020101000101000001000001000001000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000010001000102000203020304030403
0405030406040607060709080908090B0A0B0D0C0D0F0E100E10121112141314161517161719181A
1B1A1C1E1D1F2120222123252527
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000
>
<
E6E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8
E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEB
EBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDED
EDEDEDEDEDEEEEEEEEEEEEEEEEEE
>
<
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A
>
<
D0CFCFCECDCDCCCCCBCACAC9C8C8C7C6C6C5C4C4C3C3C2C1C1C0BFBFBEBDBDBCBCBBBABAB9B8B8B7
B6B6B5B5B4B3B3B2B1B1B0AFAFAEADADACACABAAAAA9A8A8A7A6A6A5A5A4A3A3A2A1A1A09F9F9E9E
9D9C9C9B9A9A9998989796969595949393929191908F8F8E8E8D8C8C8B8A8A898888878786858584
8383828181807F7F7E7E7D7C7C7B
>
4 %_Br
<
00000000000000000103040507080A0B0D0F101213141617181A1B1C1E1F20212223242526272829
2A2B2C2C2D2E2E2F303131323334353636373838393A3A3B3B3C3C3D3D3E3F404041424343444445
45464647474848494949494A4B4B4C4C4C4D4D4E4E4F4F5050515152525353545455555656575758
5859595A595A5A5B5C5D5D5E5E5F5F606061616262636365656666686869696B6B6C6C6E6E6F7071
7172727474767678797B7B7E7F81818383858588888A898C8B8E8E9191949497979A9C9F9EA1A1A4
A3A8A7AAA8ABABAEAEB2B2B5B5B8B9BCBFC2C3C6
>
<
E8E9E9E9EAEAEBEBEBEBECECECEDEDEDEDEDEEEEEFEFEFEFEFEFF0F0F0F0F1F1F1F2F2F2F2F2F2F2
F2F2F2F2F3F3F3F3F4F4F4F4F4F4F4F5F5F4F4F4F4F4F5F5F5F5F5F5F5F5F6F6F5F5F5F5F5F6F6F6
F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F6F6F6F7F6F6F6F6F6F6F7F7F7F7F6F6F6F6F7F7F7F7F6F6
F6F7F7F7F7F6F6F6F7F6F6F6F5F5F5F5F6F6F6F6F5F5F4F5F4F3F3F2F2F1F2F2F1F1F0F0EFF1F0F0
EFEFEEEEEDEEEDEDEBEAE9E8E8E8E7E7E6E6E4E6E5E5E3E3E1E1DFE1DFDEDCDBD8D8D8D7D6D6D4D4
D2D5D3D3D1D2CFCFCCCFCCCBC8C7C4C3C3C3C0BF
>
<
272629282A2A2C2B2E2E302F313134333636383739393C3B3D3D3F3E414043424443454547474949
4B4A4C4B4D4C4E4D4E4E504F515052515352545354545554555456555756575758585A595A595B5A
5B5B5C5B5C5B5D5C5D5D5E5D5E5D5F5E605F605F605F616062616261626263626463636264636463
65636463656466646564666567666866676668676967696769686A696B6A6A696B6A6C6B6D6B6D6B
6E6C6E6D706E6F6F717073727373747476767776777879797A7A7C7B7D7D7F7F8081818283838585
8686878889898B8B8E8C8E8F9191949494959797
>
<
0000000000000000000001010101010101020202020203030304040405050606070808090A0A0B0B
0C0D0E0E0F101112131415161718191A1C1D1E1F20212324252627282A2B2C2D2F30313234353637
39393B3C3D3E40404243454648494B4C4E4F5152545557585A5B5C5D5F606263656668696B6C6E6F
717274757678797A7C7D7F808283858688898B8C8E8E90919293959697989A9B9D9EA0A1A3A4A5A6
A8A9ABACADAEB0B1B3B3B5B6B8B8BBBBBDBDBFBFC1C1C3C3C5C5C7C7C9C9CBCCCECED0D0D2D2D4D4
D6D6D8D8DADADCDCDEDEDFDFE1E1E3E3E5E5E6E6
>
<
EEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7
C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F
9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877
767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F
4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827
262524232221201F1E1D1C1B1A19181716151413
>
<
2A2A2A2A292929292929292828282828282828272727272727272626262626262625252525252525
252424242424242423232323232323222222222222222221212121212121202020202020201F1F1F
1F1F1F1F1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1A1A1A1A1A1A
1A191919191919191818181818181818171717171717171616161616161615151515151515141414
141414141413131313131313121212121212121111111111111111101010101010100F0F0F0F0F0F
0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0C0C0C0C
>
<
7B7B7A7A79797878777776767575747473737272717170706F6F6E6E6D6D6C6C6B6B6A6A69696868
676766666565646463636262616160605F5F5E5E5D5D5C5C5B5B5A5A595958585757565655555454
53535252515150504F4F4E4E4D4D4C4C4B4B4A4A4949484847474646454544444343424241414040
3F3F3E3E3D3D3C3C3B3B3A3A39393838373736363535343433333232313130302F2F2E2E2D2D2C2C
2B2B2A2A29292828272726262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A19191818
171716161515141413131212111110100F0F0E0E
>
4 %_Br
0.775784
0.750057
0.593927
0.901884
0.07451
0.047059
0.054902
4 %_Br
<
C6C5C6C6C4C4C6C7C6C6C8C9CAC9CDCCCDCBCECCCCCDCDCDCBCECDCDCCCFCECECDCFCFCECECFCFCE
CECFCFCDCFCECDCDCECDCCCCCDCCCBCBCCCBCBCACBCACACBCACAC9CBCACAC9CAC9C8C7C8C7C7C6C7
C7C6C5C6C5C4C5C4C3C2C3C3C2C1C1C1BFBFBFBFBDBDBEBDBCBCBCBABABAB9B8B7B8B6B6B5B5B4B3
B1B2B0AFAEAEADABABAAA9A8A8A6A5A4A4A3A2A1A1A09E9D9D9C
>
<
BFC2C2C5C5C8C8CCCBCFCED1D3D2D5D4D6D5D7D5D7D6D8DAD9DBDADDDCDEDDDFDFE1E3E1E3E2E3E1
E3E1E3E1E2E4E2E4E2E3E2E3E1E3E1E2E3E1E3E1E2E1E2E1E2E1E3E4E3E4E2E3E1E2E1E2E0E1E0E1
E1E0E1DFE0DFDFDEDFDDDEDFDDDEDDDDDCDDDBDCDADBDBD9DAD8D9D7D8D6D7D6D6D6D5D5D4D4D3D3
D2D2D1D1D1D0D0CECECDCDCBCBCACACAC9C9C8C8C7C7C6C6C4C4
>
<
97969694939192908F8E8E8C8A8A898887878585838381807F7E7D7B7B7A7A787876757573737171
70706F6E6D6C6B6A6A696867676665646363616160605E5E5D5C5B5A5A5858575655555453525250
4F4F4D4D4C4B4A494848464545434341413F3F3D3D3B3A39373735343232302F2D2C2B2929262523
221F1E1C1918161512110F0D0B0A070404010000000000000000
>
<
E6E5E3E2E0DEDDDBD9D7D6D4D1D0CDCCC9C7C5C3C1BFBCBAB8B6B4B2B0AEACAAA9A7A4A2A09E9B99
979592908D8B89878582807E7C79777572706E6C69676563605F5D5A58565452504D4C4947454341
3F3D3A39373533312F2D2B2928262422211F1E1C1B191716141312110F0E0D0C0B09080706050504
0403030302020201010101010000000000000000000000000000
>
<
1314141516171718191A1A1B1C1D1D1E1F20202122222324252526272828292A2B2B2C2D2E2E2F30
313132333334353636373839393A3B3C3C3D3E3F3F404141424344444546474748494A4A4B4C4D4D
4E4F50505152525354555556575858595A5B5B5C5D5E5E5F60606162636364656666676869696A6B
6C6C6D6E6F6F707171727374747576777778797A7A7B7C7D7D7E
>
<
0C0C0D0D0E0E0F0F101011111112121313141415151616161717181819191A1A1B1B1B1C1C1D1D1E
1E1F1F202020212122222323242425252526262727282829292A2A2A2B2B2C2C2D2D2E2E2F2F3030
30313132323333343435353536363737383839393A3A3A3B3B3C3C3D3D3E3E3F3F3F404041414242
434344444445454646474748484949494A4A4B4B4C4C4D4D4E4E
>
<
0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435
363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D
5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485
868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
>
4 %_Br
<
9C9B9A98979695939291908E8D8C8B89888786848382817F7E7D7B7A79787675747271706E6D6B6A
69686665646261605F5D5C5B595756545352504F4E4D4B4A484746444342403F3E3D3B3A39383735
3432302F2E2C2B2A29282625242221201F1D1C1B1A191816
>
<
C4C3C2C1C0BFBEBDBCBCBBBAB9B8B7B5B4B3B2B1B0AEADACABAAAAA9A8A7A6A5A4A3A3A2A1A09F9E
9D9C9B9B9A99989796969594939291908F8E8D8C8B8B8A89888786868584838281807F7E7D7C7D7C
7B7A797876757574737271706F6E6E6E6D6C6B6B6A696867
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000001000000
000000010001000100010002010201010001000201020102
>
0.000031
<
7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5
A6A7A8A9AAABACADAEAFB0B1B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCE
CFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6
>
<
4E4F50515253545556565758595A5B5C5D5E5F60616263646566666768696A6B6C6D6E6F70717273
747576767778797A7B7C7D7E7F80818283848586878788898A8B8C8D8E8F90919293949596979798
999A9B9C9D9E9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAF
>
<
9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2
B2B3B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5
C5C6C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0
>
4 %_Br
<
1618191A1B1C1D1F20212224252628292A2B2C2E2F303234353738393A3B3D3E3F40424344464748
4A4B4D4E4F505253545657595B5C5D5F60616264656668696A6B6D6E70717274757678797A7B7D7E
7F81828384868788898B8C8D8E90919293959697989A9B9C
>
<
6768696A6B6B6C6D6E6E6E6F707172737475757678797A7B7C7D7C7D7E7F80818283848586868788
898A8B8B8C8D8E8F90919293949596969798999A9B9B9C9D9E9FA0A1A2A3A3A4A5A6A7A8A9AAAAAB
ACADAEB0B1B2B3B4B5B7B8B9BABBBCBCBDBEBFC0C1C2C3C4
>
<
02010201020001000101020102000100010001000100000000000001000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000
>
0.000031
<
E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BF
BEBDBCBBBAB9B8B7B6B5B4B3B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796
9594939291908F8E8D8C8B8A898887868584838281807F7E
>
<
AFAEADACABAAA9A8A7A7A6A5A4A3A2A1A09F9E9D9C9B9A99989797969594939291908F8E8D8C8B8A
89888787868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A696867666665
64636261605F5E5D5C5B5A59585756565554535251504F4E
>
<
D0D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C2C2C1C1C0C0BFBFBEBEBD
BDBCBCBCBBBBBABAB9B9B8B8B7B7B6B6B5B5B4B4B3B3B3B2B2B1B1B0B0AFAFAEAEADADACACABABAA
AAA9A9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A09F9F
>
4 %_Br
<
9C9D9D9EA0A1A1A2A3A4A4A5A6A8A8A9AAABABADAEAEAFB0B2B1B3B4B5B5B6B6B8B7B8B9BABABABC
BCBCBDBEBDBDBFBFBFBFC1C1C1C2C3C3C2C3C4C5C4C5C6C5C6C7C7C6C7C7C8C7C8C9CAC9CACACBC9
CACACBCACACBCACBCBCCCBCBCCCDCCCCCDCECDCDCECFCDCFCFCECECFCFCECECFCFCDCECECFCCCDCD
CECBCDCDCDCCCCCECBCDCCCDC9CAC9C8C6C6C7C6C4C4C6C6C5C6
>
<
C4C4C6C6C7C7C8C8C9C9CACACACBCBCDCDCECED0D0D1D1D1D2D2D3D3D4D4D5D5D6D6D6D7D6D8D7D9
D8DAD9DBDBDADCDBDDDCDDDDDEDDDFDEDDDFDEDFDFE0DFE1E0E1E1E0E1E0E2E1E2E1E3E2E4E3E4E3
E1E2E1E2E1E2E1E3E1E3E2E1E3E1E3E2E3E2E4E2E4E2E1E3E1E3E1E3E2E3E1E3E1DFDFDDDEDCDDDA
DBD9DAD8D6D7D5D7D5D6D4D5D2D3D1CECFCBCCC8C8C5C5C2C2BF
>
<
0000000000000000010404070A0B0D0F1112151618191C1E1F2223252629292B2C2D2F3032323435
3737393A3B3D3D3F3F414143434545464848494A4B4C4D4D4F4F50525253545555565758585A5A5B
5C5D5E5E606061616363646566676768696A6A6B6C6D6E6F70707171737375757678787A7A7B7B7D
7E7F808183838585878788898A8A8C8E8E8F9092919394969697
>
<
0000000000000000000000000000010101010102020203030304040505060708090B0C0D0E0F1112
13141617191B1C1E1F2122242628292B2D2F31333537393A3D3F41434547494C4D50525456585A5D
5F60636567696C6E70727577797C7E80828587898B8D90929597999B9EA0A2A4A7A9AAACAEB0B2B4
B6B8BABCBFC1C3C5C7C9CCCDD0D1D4D6D7D9DBDDDEE0E2E3E5E6
>
<
7E7D7D7C7B7A7A797877777675747473727171706F6F6E6D6C6C6B6A696968676666656463636261
60605F5E5E5D5C5B5B5A59585857565555545352525150504F4E4D4D4C4B4A4A4948474746454444
43424141403F3F3E3D3C3C3B3A39393837363635343333323131302F2E2E2D2C2B2B2A2928282726
2525242322222120201F1E1D1D1C1B1A1A191817171615141413
>
<
4E4E4D4D4C4C4B4B4A4A494949484847474646454544444443434242414140403F3F3F3E3E3D3D3C
3C3B3B3A3A3A393938383737363635353534343333323231313030302F2F2E2E2D2D2C2C2B2B2A2A
2A292928282727262625252524242323222221212020201F1F1E1E1D1D1C1C1B1B1B1A1A19191818
1717161616151514141313121211111110100F0F0E0E0D0D0C0C
>
<
9F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A7978
77767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525150
4F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928
27262524232221201F1E1D1C1B1A191817161514131211100F0E
>
4 %_Br
0.775784
0.750057
0.593927
0.901884
0.07451
0.047059
0.054902
4 %_Br
[
0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 75.6015 73.8792 %_BS
%_0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 75.6015 73.8792 Bs
0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 87.8493 %_BS
%_0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 87.8493 Bs
0.71252 0.125399 0.000031 0.000031 0 0.682353 0.937255 2 50 88.1542 %_BS
%_0.71252 0.125399 0.000031 0.000031 0 0.682353 0.937255 2 50 88.1542 Bs
0.299962 0.000031 0.007843 0.000031 0.737255 0.901961 0.984314 2 50 88.7967 %_BS
%_0.299962 0.000031 0.007843 0.000031 0.737255 0.901961 0.984314 2 50 88.7967 Bs
0.71252 0.125399 0.000031 0.000031 0 0.682353 0.937255 2 50 89.2704 %_BS
%_0.71252 0.125399 0.000031 0.000031 0 0.682353 0.937255 2 50 89.2704 Bs
0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 89.6428 %_BS
%_0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 89.6428 Bs
0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 90.8946 %_BS
%_0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 90.8946 Bs
0.000031 0.911681 0.151461 0.000122 0.933333 0.164706 0.482353 2 50 91.2834 %_BS
%_0.000031 0.911681 0.151461 0.000122 0.933333 0.164706 0.482353 2 50 91.2834 Bs
0.087251 0.403906 0.006775 0.000031 0.901961 0.686275 0.815686 2 50 92.2176 %_BS
%_0.087251 0.403906 0.006775 0.000031 0.901961 0.686275 0.815686 2 50 92.2176 Bs
0.000031 0.911681 0.151461 0.000122 0.933333 0.164706 0.482353 2 50 92.7625 %_BS
%_0.000031 0.911681 0.151461 0.000122 0.933333 0.164706 0.482353 2 50 92.7625 Bs
0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 93.1133 %_BS
%_0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 93.1133 Bs
0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 94.3587 %_BS
%_0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 94.3587 Bs
0.613367 0.770535 0.000031 0.000031 0.494118 0.305882 0.623529 2 50 94.7866 %_BS
%_0.613367 0.770535 0.000031 0.000031 0.494118 0.305882 0.623529 2 50 94.7866 Bs
0.087251 0.403906 0.006775 0.000031 0.901961 0.686275 0.815686 2 50 95.6817 %_BS
%_0.087251 0.403906 0.006775 0.000031 0.901961 0.686275 0.815686 2 50 95.6817 Bs
0.613367 0.770535 0.000031 0.000031 0.494118 0.305882 0.623529 2 50 96.3828 %_BS
%_0.613367 0.770535 0.000031 0.000031 0.494118 0.305882 0.623529 2 50 96.3828 Bs
0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 26.3746 96.8106 %_BS
%_0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 26.3746 96.8106 Bs
0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 99.929 %_BS
%_0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 99.929 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\702\756\744\740)
(\702\756\744\740) 0 5 Bd
[
<
CECECFCFD0D0D1D1D1D2D2D3D3D4D4D5D5D6D6D7D7D7D8D8D9D9DADBDB
>
<
454648494A4C4D4C4D4E4F51525354555657595A5B5A5C5D5E5F616263
>
<
3D3D3E3E3F3F3F41424243434444444647474849494B4B4C4C4D4D4E4E
>
<
0E0F0F1011111213141415161717181A1A1B1C1D1D1E1F202121222324
>
0
<
8A89888786858484838281807F7E7D7C7B7A7978777776757473727170
>
<
A9A8A7A6A5A4A3A2A1A09F9E9D9C9B999897969594939291908F8E8D8C
>
4 %_Br
<
BABBBBBCBCBDBDBEBEBEBFBFC0C0C1C1C2C3C3C4C4C4C5C5C6C6C6C7C7C7C8C8C8C9C9CACACACBCB
CBCCCCCDCDCDCE
>
<
0F111212141517191A1A1C1D1F2122222426282A2B2B2C2E2F303031333435373638393A3C3D3D3E
3F414243434445
>
<
1A1B1C1D1E1E1F202022222323242527272829292A2C2C2D2F2F3132323333333536363737373939
3A3A3A3B3C3D3D
>
<
0000000000000000000000000001010101010202020203030404040405050606070708080909090A
0B0B0C0C0D0E0E
>
0
<
B0AFAEAEADACABAAA9A9A8A7A6A5A4A4A3A2A1A09F9F9E9D9C9B9B9A999897969695949392919190
8F8E8D8C8C8B8A
>
<
D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9
>
4 %_Br
<
828384858586878888898A8B8B8C8D8E8E8F9090919192939394949595969697979899999A9A9B9B
9C9C9D9D9E9E9F9FA0A0A1A1A1A2A3A3A3A4A4A5A5A5A6A7A7A8A8A9A9AAAAABABACACACACADAEAE
AEAFAFB0B0B1B1B1B1B2B2B2B3B3B3B4B4B4B4B5B5B5B5B5B6B6B6B6B6B7B7B7B7B8B8B8B8B9B9B9
B9BABABABABABA
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000010101010303020204040403050505050606060608080808090909090B0B0B0A0C0C0C
0C0E0E0D0D0F0F
>
<
171716161819181818181718191A1919191918191A1B1A1A1A1A191A1B1B1B1B1B1B1A1A1C1C1B1B
1B1B1A1B1C1C1B1B1C1C1B1B1C1D1B1C1C1C1B1B1D1D1C1C1C1B1B1D1D1C1C1C1C1B1B1D1D1C1C1C
1C1C1C1D1D1C1C1D1D1C1C1D1D1C1C1C1C1B1B1D1D1C1C1C1C1B1B1C1C1B1B1B1B1A1A1C1C1B1B1B
1B1A1A1B1B1A1A
>
0.000031
<
7F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A5958
57565554535251504F4E4D4C4B4A494847464544434241403E3D3C3B3A393837363534333231302F
2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A090807
06050403020100
>
<
D0D0CFCFCFCFCECECECECDCDCDCDCCCCCCCCCBCBCBCBCACACACAC9C9C9C9C8C8C8C8C7C7C7C7C6C6
C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C1C1C1C1C0C0C0BFBFBFBFBEBEBEBEBDBDBDBDBCBCBC
BCBBBBBBBBBABABABAB9B9B9B9B8B8B8B8B7B7B7B7B6B6B6B6B5B5B5B5B4B4B4B4B3B3B3B3B2B2B2
B2B1B1B1B1B0B0
>
<
E8E8E8E8E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E5E5E5E5E5E5E5E5E4E4E4E4E4E4E4E4E3E3E3E3
E3E3E3E3E2E2E2E2E2E2E2E2E1E1E1E1E1E1E1E1E0E0E0E0E0E0E0DFDFDFDFDFDFDFDFDEDEDEDEDE
DEDEDEDDDDDDDDDDDDDDDDDCDCDCDCDCDCDCDCDBDBDBDBDBDBDBDBDADADADADADADADAD9D9D9D9D9
D9D9D9D8D8D8D8
>
4 %_Br
<
0000010304050708090A0C0D0E10111314151718191B1C1D1E1F2021222324262728292A2B2C2D2E
2F30323334353637393A3B3C3D3F40414243444546474849494A4B4D4D4E4F505152535455565758
585A5A5B5C5D5E5F606162636465666768696A6B6C6C6D6E6F7071727373747576777878797A7A7B
7C7D7E7F8080818282
>
0.000031
<
000000010101010101030303030305040405040507060607060607080807080909090909090A0A0A
0A0A0C0B0B0A0B0B0C0C0D0C0C0E0E0E0D0E0E0F0F0F0E0F0F10100F0F1010111110101011121111
12121213121211131313131314141314141315151414141515141515141616151516151716161615
171716171616181717
>
0.000031
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F
>
<
FFFFFEFEFEFDFDFCFCFCFBFBFBFAFAF9F9F9F8F8F8F7F7F7F6F6F5F5F5F4F4F4F3F3F3F2F2F1F1F1
F0F0F0EFEFEEEEEEEDEDEDECECECEBEBEAEAEAE9E9E9E8E8E8E7E7E6E6E6E5E5E5E4E4E3E3E3E2E2
E2E1E1E1E0E0DFDFDFDEDEDEDDDDDCDCDCDBDBDBDADADAD9D9D8D8D8D7D7D7D6D6D6D5D5D4D4D4D3
D3D3D2D2D1D1D1D0D0
>
<
FFFFFFFEFEFEFEFEFEFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F9F9F8F8F8
F8F8F7F7F7F7F7F7F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F4F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1
F1F0F0F0F0F0F0EFEFEFEFEFEEEEEEEEEEEEEDEDEDEDEDECECECECECECEBEBEBEBEBEBEAEAEAEAEA
E9E9E9E9E9E9E8E8E8
>
4 %_Br
[
0.85977 0.390143 0.306096 0.14078 0 0.439216 0.54902 2 50 98.8764 %_BS
%_0.85977 0.390143 0.306096 0.14078 0 0.439216 0.54902 2 50 98.8764 Bs
0.807156 0.271885 0.239567 0.055909 0 0.541176 0.662745 2 50 77.5281 %_BS
%_0.807156 0.271885 0.239567 0.055909 0 0.541176 0.662745 2 50 77.5281 Bs
0.730861 0.059144 0.103548 0.000031 0 0.690196 0.847059 2 50 52.2472 %_BS
%_0.730861 0.059144 0.103548 0.000031 0 0.690196 0.847059 2 50 52.2472 Bs
0.511192 0.000031 0.090242 0.000031 0.498039 0.815686 0.909804 2 50 51.6854 %_BS
%_0.511192 0.000031 0.090242 0.000031 0.498039 0.815686 0.909804 2 50 51.6854 Bs
0.000031 0.000031 0.000031 0.000031 1 1 1 2 50 0 %_BS
%_0.000031 0.000031 0.000031 0.000031 1 1 1 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\720\756\747\756\742\773\751 \760\740\744\750\740\753\774\755\773\751)
(\720\756\747\756\742\773\751 \760\740\744\750\740\753\774\755\773\751) 1 2 Bd
[
0.000031
<
000002040507080A0C0D0F111214151718191B1C1C1D1F202123252628292A2C2D2E303031333436
37383A3B3B3C3E3F4042434444454748494B4C4C4D4E505152525455565757595A5B5C5C5E5F6061
61626465666667686A6A6B6C6D6D6F7071717273747476777778797A7A7B7D7C7E7F7F8081818283
838485858687878889898A8B8B8C8E8E8F8F9091919292939494959596989899999A9C9C9D9D9E9E
9F9FA0A1A1A1A1A2A2A3A3A4A4A5A5A5A5A6A6A7A7A8A8AAAAABABACACADADAEAEAEAFAFB0B0B1B1
B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B8B9B9B9BABABBBBBBBCBCBCBCBCBCBCBDBDBDBE
BEBEBFBFBFBFC0C0C0C0C0C0C0C1C1C1C1C2C2C2C2C3C3C3C3C3C4C4C4C4C4C5C5C5C5C5C5C6C6C6
C6C6C6C7C7C7C7C7C7C7C6C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C8
>
<
0000010102030405050607080808090A0A0B0B0C0E0E0F10100F1011111212131415161617171819
1A1B1B1A1C1C1D1D1E1E1D1E2020212121212224242324252628272829292B2A2B2B2C2E2D2D2E2F
2F2F303130313233323434353436363536383938393B3A3B3D3C3D3D3F3E3F414040424142444344
464546464647474849494A4B4B4C4B4D4E4E4F4E505151515052515354535554565556585759585A
595B5B5C5C5D5D5E5E5F5F6060616162626363646465656666676768686969686A6A6B6B6C6C6C6E
6E6F6F6E706F717170727173737274737575747575757676767877777978787A79797B7B7A7A7C7C
7C7E7D7D7F7F7E7E807F7F7F81818181828181818182828282848383838385858585858586868686
8686888787878787878789898989898989898989898A8A8A8A8A8A8A8A8A8A8A8A8A8A
>
0.000031
1
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDEDDDCDBDA
D9D8D7D6D6D5D4D3D2D1D0CFCFCECDCCCBCAC9C9C8C7C6C5C4C4C3C2C1C0C0BFBEBDBCBCBBBAB9B8
B8B7B6B5B4B4B3B2B1B1B0AFAEAEADACABABAAA9A8A8A7A6A6A5A4A3A3A2A1A1A09F9F9E9D9D9C9B
9B9A999998979796959594939392919190908F8E8E8D8D8C8B8B8A8A898888878786858584848383
82828180807F7F7E7E7D7D7C7C7B7B7A7A7979787877777676757574747373727272717170706F6F
6F6E6E6D6D6C6C6C6B6B6A6A6A696968686867676766666665656464646363636262626261616160
60605F5F5F5F5E5E5E5D5D5D5D5C5C5C5C5B5B5B5B5A5A5A5A5A5959595959585858585858575757
5757575656565656565656555555555555555555555454545454545454545454545454
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F4F3F2F1F0EFEEEDECEBEAE9E8E8E7E6E5E4E3E2E1E0DFDFDEDDDCDB
DAD9D8D8D7D6D5D4D3D2D2D1D0CFCECDCDCCCBCAC9C9C8C7C6C5C5C4C3C2C1C1C0BFBEBDBDBCBBBA
BAB9B8B7B7B6B5B4B4B3B2B1B1B0AFAFAEADACACABAAAAA9A8A8A7A6A5A5A4A3A3A2A1A1A09F9F9E
9D9D9C9C9B9A9A999898979696959594939392929190908F8F8E8E8D8C8C8B8B8A8A898888878786
868585848483838282818180807F7F7E7E7D7D7C7C7B7B7A7A797978787777777676757574747473
7372727271717070706F6F6E6E6E6D6D6C6C6C6B6B6B6A6A6A696969686868676767666666666565
6564646463636363626262626161616160606060605F5F5F5F5E5E5E5E5E5D5D5D5D5D5D5C5C5C5C
5C5C5B5B5B5B5B5B5B5B5A5A5A5A5A5A5A5A5A5A5A5959595959595959595959595959
>
4 %_Br
[
0.000031 0.000031 0.000031 0.000031 1 1 1 2 31.3953 49.7076 %_BS
%_0.000031 0.000031 0.000031 0.000031 1 1 1 2 31.3953 49.7076 Bs
0.000031 0.784207 0.541497 0.000031 1 0.329412 0.34902 2 50 100 %_BS
%_0.000031 0.784207 0.541497 0.000031 1 0.329412 0.34902 2 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\721 \756\761\742\745\762\753\745\755\750\745\754 \752\760\740\745\742)
(\721 \756\761\742\745\762\753\745\755\750\745\754 \752\760\740\745\742) 0 3 Bd
[
0.720851
0.673426
0.586358
0.790768
0.137255
0.121569
0.12549
4 %_Br
0.720851
0.673426
0.586358
0.790768
0.137255
0.121569
0.12549
4 %_Br
[
0.720851 0.673426 0.586358 0.790768 0.137255 0.121569 0.12549 2 50 100 %_BS
%_0.720851 0.673426 0.586358 0.790768 0.137255 0.121569 0.12549 2 50 100 Bs
0.720851 0.673426 0.586358 0.790768 0.137255 0.121569 0.12549 2 50 50 %_BS
%_0.720851 0.673426 0.586358 0.790768 0.137255 0.121569 0.12549 2 50 50 Bs
0.720851 0.673426 0.586358 0.790768 0.137255 0.121569 0.12549 2 50 0 %_BS
%_0.720851 0.673426 0.586358 0.790768 0.137255 0.121569 0.12549 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (\701\760\750\753\753\750\740\755\762\756\742\773\745 \752\763\741\773)
(\701\760\750\753\753\750\740\755\762\756\742\773\745 \752\763\741\773) 6.5605 11.3652 85.3018 79.5596 [
%AI3_Tile
(0 O 0 R 0.198489 0.180606 0.292912 0.019104 0.827451 0.792157 0.717647 Xa
 0.198489 0.180606 0.292912 0.019104 0.827451 0.792157 0.717647 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
45.9316 56.8281 m
39.3691 45.4609 L
26.2471 45.4609 L
32.8066 56.8281 L
45.9316 56.8281 L
f
45.9316 34.0957 m
39.3691 22.7305 L
26.2471 22.7305 L
32.8066 34.0957 L
45.9316 34.0957 L
f
65.6162 22.7305 m
59.0537 11.3652 L
45.9316 11.3652 L
52.4932 22.7305 L
65.6162 22.7305 L
f
65.6162 45.4609 m
59.0537 34.0977 L
45.9316 34.0977 L
52.4932 45.4609 L
65.6162 45.4609 L
f
26.2471 22.7305 m
19.6846 11.3652 L
6.5605 11.3652 L
13.123 22.7305 L
26.2471 22.7305 L
f
26.2471 45.4609 m
19.6846 34.0977 L
6.5605 34.0977 L
13.123 45.4609 L
26.2471 45.4609 L
f
45.9316 79.5586 m
39.3691 68.1924 L
26.2471 68.1924 L
32.8066 79.5586 L
45.9316 79.5586 L
f
65.6162 68.1934 m
59.0537 56.8281 L
45.9316 56.8281 L
52.4932 68.1924 L
65.6162 68.1934 L
f
85.3018 56.8281 m
78.7402 45.4609 L
65.6162 45.4609 L
72.1777 56.8281 L
85.3018 56.8281 L
f
85.3018 34.0957 m
78.7402 22.7305 L
65.6162 22.7305 L
72.1777 34.0957 L
85.3018 34.0957 L
f
85.3018 79.5586 m
78.7402 68.1924 L
65.6162 68.1924 L
72.1777 79.5586 L
85.3018 79.5586 L
f
26.2471 68.1924 m
19.6846 56.8281 L
6.5605 56.8281 L
13.123 68.1924 L
26.2471 68.1924 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.500023 0.363867 0.214908 0.047211 0.54902 0.584314 0.67451 Xa
 0.500023 0.363867 0.214908 0.047211 0.54902 0.584314 0.67451 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
26.2471 68.1924 m
19.6846 56.8281 L
26.2471 45.4609 L
32.8066 56.8281 L
26.2471 68.1924 L
f
26.2471 45.4609 m
19.6846 34.0957 L
26.2471 22.7305 L
32.8066 34.0957 L
26.2471 45.4609 L
f
26.2471 22.7305 m
19.6846 11.3652 L
26.2471 0 L
32.8066 11.3652 L
26.2471 22.7305 L
f
45.9316 34.0957 m
39.3691 22.7305 L
45.9316 11.3652 L
52.4932 22.7305 L
45.9316 34.0957 L
f
45.9316 56.8281 m
39.3691 45.4609 L
45.9316 34.0977 L
52.4932 45.4609 L
45.9316 56.8281 L
f
6.5605 34.0957 m
0 22.7305 L
6.5605 11.3652 L
13.123 22.7305 L
6.5605 34.0957 L
f
6.5605 56.8281 m
0 45.4609 L
6.5605 34.0977 L
13.123 45.4609 L
6.5605 56.8281 L
f
26.2471 90.9238 m
19.6846 79.5586 L
26.2471 68.1924 L
32.8066 79.5586 L
26.2471 90.9238 L
f
45.9316 79.5586 m
39.3691 68.1924 L
45.9316 56.8281 L
52.4932 68.1924 L
45.9316 79.5586 L
f
65.6162 68.1924 m
59.0537 56.8281 L
65.6162 45.4609 L
72.1777 56.8281 L
65.6162 68.1924 L
f
65.6162 45.4609 m
59.0537 34.0957 L
65.6162 22.7305 L
72.1777 34.0957 L
65.6162 45.4609 L
f
65.6162 22.7305 m
59.0537 11.3652 L
65.6162 0 L
72.1777 11.3652 L
65.6162 22.7305 L
f
85.3018 34.0957 m
78.7402 22.7305 L
85.3018 11.3652 L
91.8643 22.7305 L
85.3018 34.0957 L
f
85.3018 56.8281 m
78.7402 45.4609 L
85.3018 34.0977 L
91.8643 45.4609 L
85.3018 56.8281 L
f
65.6162 90.9238 m
59.0537 79.5586 L
65.6162 68.1924 L
72.1777 79.5586 L
65.6162 90.9238 L
f
85.3018 79.5586 m
78.7402 68.1924 L
85.3018 56.8281 L
91.8643 68.1924 L
85.3018 79.5586 L
f
6.5605 79.5576 m
0 68.1924 L
6.5605 56.8281 L
13.123 68.1924 L
6.5605 79.5576 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(Unnamed Brush Pat)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-6541 6541 m
-6361.6558 6541 L
-6361.6558 6505.8267 L
-6541 6505.8267 L
-6541 6541 L
n
u
u
0 O
0.000031 0.469978 0.910552 0.000031 0.972549 0.603922 0.109804 Xa
0 R
0.720851 0.673426 0.586358 0.790768 0.137255 0.121569 0.12549 XA
0.5 w-6379.8286 6506.0781 m
-6522.8276 6506.0781 L
-6522.8276 6508.6475 L
-6379.8286 6508.6475 L
-6379.8286 6506.0781 L
b
-6522.8276 6531.4829 m
-6379.8286 6531.4829 L
-6379.8286 6528.7109 L
-6522.8276 6528.7109 L
-6522.8276 6531.4829 L
b
0.000031 0.000031 0.000031 0.000031 1 1 1 Xa
-6522.8276 6508.6475 m
-6522.8276 6528.7109 L
-6379.8286 6528.7109 L
-6379.8286 6508.6475 L
-6522.8276 6508.6475 L
b
U
0.000031 0.469978 0.910552 0.000031 0.972549 0.603922 0.109804 Xa
-6401.1978 6540.6191 m
-6362.2544 6540.6191 L
-6364.4292 6538.3984 L
-6395.9976 6538.3984 L
-6401.1978 6540.6191 L
b
-6362.2544 6516.585 m
-6379.8286 6516.585 L
-6379.8286 6518.6797 L
-6364.3237 6518.6797 L
-6362.2544 6516.585 L
b
0.000031 0.000031 0.000031 0.000031 1 1 1 Xa
-6364.3237 6518.6797 m
-6379.8286 6518.6797 L
-6379.8286 6531.4829 L
-6395.9976 6538.3984 L
-6364.4292 6538.3984 L
-6374.6465 6529.1279 L
-6364.3237 6518.6797 L
b
0.000031 0.469978 0.910552 0.000031 0.972549 0.603922 0.109804 Xa
-6540.4019 6540.6191 m
-6501.4595 6540.6191 L
-6506.6587 6538.3984 L
-6538.2285 6538.3984 L
-6540.4019 6540.6191 L
b
0.000031 0.000031 0.000031 0.000031 1 1 1 Xa
-6522.8286 6518.6797 m
-6538.3345 6518.6797 L
-6528.0112 6529.1279 L
-6538.2285 6538.3984 L
-6506.6587 6538.3984 L
-6522.8286 6531.4829 L
-6522.8286 6518.6797 L
b
0.000031 0.469978 0.910552 0.000031 0.972549 0.603922 0.109804 Xa
-6522.8286 6516.585 m
-6540.4019 6516.585 L
-6538.3345 6518.6797 L
-6522.8286 6518.6797 L
-6522.8286 6516.585 L
b
-6501.4595 6540.6191 m
-6522.8286 6531.4829 L
S
u
0 O
0.720851 0.673426 0.586358 0.790768 0.137255 0.121569 0.12549 Xa
-6401.1978 6531.4829 m
-6401.1978 6538.1836 L
-6385.5269 6531.4829 L
-6401.1978 6531.4829 L
b
0.000031 0.469978 0.910552 0.000031 0.972549 0.603922 0.109804 Xa
-6401.1978 6538.1836 m
-6401.1978 6540.6191 L
-6379.8286 6531.4829 L
-6385.5269 6531.4829 L
-6401.1978 6538.1836 L
b
-6522.8286 6531.4829 m
-6501.4595 6540.6191 L
-6501.4595 6538.1836 L
-6517.1294 6531.4829 L
-6522.8286 6531.4829 L
b
0.720851 0.673426 0.586358 0.790768 0.137255 0.121569 0.12549 Xa
-6517.1294 6531.4829 m
-6501.4595 6538.1836 L
-6501.4595 6531.4829 L
-6517.1294 6531.4829 L
b
U
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 44)0 A
u
1 Ap
0 J 0 j 1 w 4 M []0 d1 XR
-6536.6665 6541 m
-6541 6541 L
-6541 6537.3989 L
-6536.6665 6537.3989 L
-6536.6665 6541 L
n
u
0 Ap
0 XR
-6539.9702 6540.3359 m
-6537.6963 6540.3359 L
-6537.6963 6538.0625 L
-6539.9702 6538.0625 L
-6539.9702 6540.3359 L
n
1 Ap
0 O
0.720851 0.673426 0.586358 0.790768 0.137255 0.121569 0.12549 Xa
1 XR
-6537.6963 6539.1992 m
-6537.6963 6539.8262 -6538.2056 6540.3359 -6538.8335 6540.3359 c
-6539.4614 6540.3359 -6539.9702 6539.8262 -6539.9702 6539.1992 c
-6539.9702 6538.5718 -6539.4614 6538.0625 -6538.8335 6538.0625 c
-6538.2056 6538.0625 -6537.6963 6538.5718 -6537.6963 6539.1992 c
f
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 47)0 A
u
0 Ap
0 J 0 j 1 w 4 M []0 d1 XR
-6534.6064 6541 m
-6541 6541 L
-6541 6537.3989 L
-6534.6064 6537.3989 L
-6534.6064 6541 L
n
u
0 XR
-6538.9404 6540.3359 m
-6536.6665 6540.3359 L
-6536.6665 6538.0625 L
-6538.9404 6538.0625 L
-6538.9404 6540.3359 L
n
1 Ap
0 O
0.720851 0.673426 0.586358 0.790768 0.137255 0.121569 0.12549 Xa
1 XR
-6536.6665 6539.1992 m
-6536.6665 6539.8262 -6537.1753 6540.3359 -6537.8032 6540.3359 c
-6538.4312 6540.3359 -6538.9404 6539.8262 -6538.9404 6539.1992 c
-6538.9404 6538.5718 -6538.4312 6538.0625 -6537.8032 6538.0625 c
-6537.1753 6538.0625 -6536.6665 6538.5718 -6536.6665 6539.1992 c
f
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 48)0 A
u
0 Ap
0 J 0 j 1 w 4 M []0 d0 XR
-6541 6541 m
-6533.1465 6541 L
-6533.1465 6532.5957 L
-6541 6532.5957 L
-6541 6541 L
n
u
0 O
0.720851 0.673426 0.586358 0.790768 0.137255 0.121569 0.12549 Xa
3.86371 M-6540.1582 6532.5957 m
-6539.6812 6532.5845 -6539.2842 6532.9595 -6539.2725 6533.4375 c
-6539.2593 6533.9141 -6539.6357 6534.3101 -6540.1138 6534.3237 c
-6540.5903 6534.3359 -6540.9878 6533.96 -6540.9995 6533.4824 c
-6541.0122 6533.0054 -6540.6357 6532.6069 -6540.1582 6532.5957 c
f
-6540.1357 6533.46 m
F
U
u
-6540.1558 6534.8184 m
-6539.6782 6534.8086 -6539.2813 6535.1846 -6539.2686 6535.6621 c
-6539.2563 6536.1382 -6539.6333 6536.5356 -6540.1104 6536.5488 c
-6540.5874 6536.5615 -6540.9849 6536.1846 -6540.9971 6535.7075 c
-6541.0093 6535.23 -6540.6328 6534.8345 -6540.1558 6534.8184 c
f
-6540.1333 6535.6846 m
F
U
u
-6540.1523 6537.0469 m
-6539.6753 6537.0342 -6539.2783 6537.4102 -6539.2661 6537.8877 c
-6539.2539 6538.3638 -6539.6304 6538.7612 -6540.1074 6538.7744 c
-6540.5845 6538.7871 -6540.9814 6538.4102 -6540.9937 6537.9326 c
-6541.0068 6537.4556 -6540.6299 6537.0581 -6540.1523 6537.0469 c
f
-6540.1299 6537.9102 m
F
U
u
-6540.1499 6539.2725 m
-6539.6724 6539.2588 -6539.2754 6539.6357 -6539.2627 6540.1133 c
-6539.25 6540.5894 -6539.6274 6540.9863 -6540.1045 6541 c
-6540.5815 6541.0127 -6540.9785 6540.6357 -6540.9912 6540.1582 c
-6541.0029 6539.6816 -6540.6274 6539.2832 -6540.1499 6539.2725 c
f
-6540.1274 6540.1357 m
F
U
u
-6538.1538 6533.6665 m
-6537.6763 6533.6533 -6537.2793 6534.0293 -6537.2666 6534.5068 c
-6537.2539 6534.9829 -6537.6309 6535.3804 -6538.1084 6535.3945 c
-6538.5854 6535.4063 -6538.9824 6535.0293 -6538.9946 6534.5527 c
-6539.0068 6534.0752 -6538.6304 6533.6768 -6538.1538 6533.6665 c
f
-6538.1304 6534.5293 m
F
U
u
-6538.1499 6535.8901 m
-6537.6729 6535.8789 -6537.2764 6536.2549 -6537.2632 6536.7324 c
-6537.2515 6537.21 -6537.6274 6537.6069 -6538.1055 6537.6191 c
-6538.5825 6537.6318 -6538.9795 6537.2549 -6538.9917 6536.7773 c
-6539.0039 6536.3008 -6538.6274 6535.9023 -6538.1499 6535.8901 c
f
-6538.1274 6536.7549 m
F
U
u
-6538.1475 6538.1157 m
-6537.6699 6538.1045 -6537.2729 6538.4805 -6537.2607 6538.9595 c
-6537.2485 6539.4341 -6537.6255 6539.8325 -6538.1025 6539.8447 c
-6538.5791 6539.8574 -6538.9766 6539.481 -6538.9888 6539.0029 c
-6539.0015 6538.5264 -6538.6245 6538.1279 -6538.1475 6538.1157 c
f
-6538.1245 6538.9805 m
F
U
u
-6536.0723 6534.7119 m
-6535.5952 6534.6997 -6535.1987 6535.0781 -6535.1865 6535.5532 c
-6535.1738 6536.0303 -6535.5508 6536.4287 -6536.0273 6536.4414 c
-6536.5054 6536.4541 -6536.9019 6536.0757 -6536.9141 6535.5996 c
-6536.9272 6535.1235 -6536.5498 6534.7261 -6536.0723 6534.7119 c
f
-6536.0503 6535.5781 m
F
U
u
-6536.0698 6536.9395 m
-6535.5928 6536.9253 -6535.1953 6537.3013 -6535.1831 6537.7788 c
-6535.1704 6538.2573 -6535.5474 6538.6543 -6536.0249 6538.6685 c
-6536.5024 6538.6797 -6536.8994 6538.3013 -6536.9116 6537.8252 c
-6536.9233 6537.3486 -6536.5469 6536.9512 -6536.0698 6536.9395 c
f
-6536.0474 6537.8013 m
F
U
u
-6534.0332 6535.7822 m
-6533.5557 6535.7695 -6533.1592 6536.1475 -6533.1465 6536.6255 c
-6533.1333 6537.1016 -6533.5103 6537.4985 -6533.9883 6537.5117 c
-6534.4653 6537.5225 -6534.8618 6537.1475 -6534.8745 6536.6685 c
-6534.8862 6536.1909 -6534.5098 6535.7949 -6534.0332 6535.7822 c
f
-6534.0103 6536.6475 m
F
U
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 2 \357\362., \356\342\340\353\374\355\340\377/ Adobe Calligr) -
(aphic Brush Tool/ 5 \357\362., \356\342\340\353\374\355\340\377/ Adobe Calligraphic Brush To) -
(ol/ 5 \357\362., \357\353\356\361\352\340\377/ Adobe Calligraphic Brush Tool/ 3 \357\362., \352\360\363\343) -
(\353\340\377/ Adobe Calligraphic Brush Tool/ 7 \357\362., \352\360\363\343\353\340\377/ Adobe Call) -
(igraphic Brush Tool/ 15 \357\362., \352\360\363\343\353\340\377/ Adobe ArtOnPath Brush To) -
(ol/ \301\340\355\355\345\360/ Adobe PatternOnPath Brush Tool/ \312\350\361\362\374-\361\362\360\345\353\352\340 \361 \352\360) -
(\363\343\340\354\350/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(15 \757\762., \752\760\763\743\753\740\777)
(1 15 15 100 100 15 15 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(2 \757\762., \756\742\740\753\774\755\740\777)
(1 2 2 26 74 15 15 0 1 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(3 \757\762., \752\760\763\743\753\740\777)
(1 3 3 100 100 0 0 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 \757\762., \756\742\740\753\774\755\740\777)
(1 5 5 10 90 -65 35 0 1 1 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 \757\762., \757\753\756\761\752\740\777)
(1 5 5 0 0 90 90 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(7 \757\762., \752\760\763\743\753\740\777)
(1 7 7 100 100 0 0 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(\701\740\755\755\745\760)
(1 / Unnamed Brush Pat/ / / / / 0 0 /  1 0 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe PatternOnPath Brush Tool)
(\712\750\761\762\774-\761\762\760\745\753\752\740 \761 \752\760\763\743\740\754\750)
(1 / Unnamed Brush Pat 44/ Unnamed Brush Pat 44/ Unnamed Brush ) -
(Pat 44/ Unnamed Brush Pat 48/ Unnamed Brush Pat 47/ 0 1 /  1 3) -
( 1 0 4 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.912474 0.787625 0.619837 0.97467 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
([\721\756\742\754\745\771\745\755\750\745])
Pc
0.000031 0.000031 0.000031 0.000031 1 1 1 Xa
(\701\745\753\773\751)
Pc
0.912474 0.787625 0.619837 0.97467 0 0 0 Xa
(\727\745\760\755\773\751)
Pc
0.000031 0.94641 0.916289 0.000031 1 0 0 Xa
(RGB \752\760\740\761\755\773\751)
Pc
0.096254 0.000031 0.951965 0.000031 1 1 0 Xa
(RGB \746\745\753\762\773\751)
Pc
0.647547 0.000031 1 0.000031 0 1 0 Xa
(RGB \747\745\753\745\755\773\751)
Pc
0.570733 0.000031 0.153567 0.000031 0 1 1 Xa
(RGB \743\756\753\763\741\756\751)
Pc
0.934081 0.745846 0.000031 0.000031 0 0 1 Xa
(RGB \761\750\755\750\751)
Pc
0.409979 0.77676 0.000031 0.000031 1 0 1 Xa
(RGB \757\763\760\757\763\760\755\773\751)
Pc
0.168978 0.950286 0.823636 0.068666 0.756863 0.152941 0.176471 Xa
(R=193 G=39 B=45)
Pc
0.000031 0.946624 0.85211 0.000031 0.929412 0.109804 0.141176 Xa
(R=237 G=28 B=36)
Pc
0.000031 0.752956 0.887388 0.000031 0.945098 0.352941 0.141176 Xa
(R=241 G=90 B=36)
Pc
0.000031 0.501823 0.907988 0.000031 0.968627 0.576471 0.117647 Xa
(R=247 G=147 B=30)
Pc
0.000031 0.365637 0.819852 0.000031 0.984314 0.690196 0.231373 Xa
(R=251 G=176 B=59)
Pc
0.065736 0.000031 0.852628 0.000031 0.988235 0.933333 0.129412 Xa
(R=252 G=238 B=33)
Pc
0.231907 0.000031 0.892332 0.000031 0.85098 0.878431 0.129412 Xa
(R=217 G=224 B=33)
Pc
0.524254 0.000031 0.880919 0.000031 0.54902 0.776471 0.247059 Xa
(R=140 G=198 B=63)
Pc
0.718288 0.000031 0.876951 0.000031 0.223529 0.709804 0.290196 Xa
(R=57 G=181 B=74)
Pc
0.842954 0.14374 0.926757 0.021576 0 0.572549 0.270588 Xa
(R=0 G=146 B=69)
Pc
0.899077 0.322972 0.925994 0.247654 0 0.407843 0.215686 Xa
(R=0 G=104 B=55)
Pc
0.735958 0.000031 0.689784 0.000031 0.133333 0.709804 0.45098 Xa
(R=34 G=181 B=115)
Pc
0.766171 0.045533 0.450782 0.000031 0 0.662745 0.615686 Xa
(R=0 G=169 B=157)
Pc
0.709987 0.132143 0.001953 0.000031 0.160784 0.670588 0.886275 Xa
(R=41 G=171 B=226)
Pc
0.866178 0.492958 0.000031 0.000031 0 0.443137 0.737255 Xa
(R=0 G=113 B=188)
Pc
0.975586 0.89572 0.000031 0.000824 0.180392 0.192157 0.572549 Xa
(R=46 G=49 B=146)
Pc
1 0.96997 0.322484 0.218753 0.105882 0.078431 0.392157 Xa
(R=27 G=20 B=100)
Pc
0.755703 0.923125 0.000031 0.000031 0.4 0.176471 0.568627 Xa
(R=102 G=45 B=145)
Pc
0.5393 0.930297 0.000031 0.000031 0.576471 0.152941 0.560784 Xa
(R=147 G=39 B=143)
Pc
0.323583 1 0.236301 0.1673 0.619608 0 0.364706 Xa
(R=158 G=0 B=93)
Pc
0.097993 0.983551 0.407263 0.020691 0.831373 0.078431 0.352941 Xa
(R=212 G=20 B=90)
Pc
0.000031 0.935058 0.142763 0.000031 0.929412 0.117647 0.47451 Xa
(R=237 G=30 B=121)
Pc
0.220859 0.272648 0.389227 0.061189 0.780392 0.698039 0.6 Xa
(R=199 G=178 B=153)
Pc
0.354864 0.386694 0.466072 0.211734 0.6 0.52549 0.458824 Xa
(R=153 G=134 B=117)
Pc
0.446387 0.47068 0.52636 0.380346 0.45098 0.388235 0.341176 Xa
(R=115 G=99 B=87)
Pc
0.535302 0.542443 0.552728 0.542199 0.32549 0.278431 0.254902 Xa
(R=83 G=71 B=65)
Pc
0.204685 0.376715 0.593042 0.084871 0.776471 0.611765 0.427451 Xa
(R=198 G=156 B=109)
Pc
0.280308 0.462287 0.671046 0.207126 0.65098 0.486275 0.321569 Xa
(R=166 G=124 B=82)
Pc
0.324376 0.536675 0.760494 0.329229 0.54902 0.384314 0.223529 Xa
(R=140 G=98 B=57)
Pc
0.359228 0.605188 0.857359 0.451545 0.458824 0.298039 0.141176 Xa
(R=117 G=76 B=36)
Pc
0.391424 0.683131 0.943023 0.57116 0.376471 0.219608 0.07451 Xa
(R=96 G=56 B=19)
Pc
0.474617 0.7467 0.825315 0.730831 0.258824 0.129412 0.043137 Xa
(R=66 G=33 B=11)
Pc
Bb
2 (\721 \756\761\742\745\762\753\745\755\750\745\754 \752\760\740\745\742) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(\721 \756\761\742\745\762\753\745\755\750\745\754 \752\760\740\745\742)
Pc
Bb
0 0 0 0 Bh
2 (\702\750\755\774\745\762\752\740 \750\747 \755\745\756\755\756\742\773\765 \752\756\753\745\766) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(\702\750\755\774\745\762\752\740 \750\747 \755\745\756\755\756\742\773\765 \752\756\753\745\766)
Pc
Bb
2 (\702\756\744\740) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(\702\756\744\740)
Pc
Bb
0 0 0 0 Bh
2 (\720\756\747\756\742\773\751 \760\740\744\750\740\753\774\755\773\751) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(\720\756\747\756\742\773\751 \760\740\744\750\740\753\774\755\773\751)
Pc
(\701\760\750\753\753\750\740\755\762\756\742\773\745 \752\763\741\773) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(\701\760\750\753\753\750\740\755\762\756\742\773\745 \752\763\741\773)
Pc
0.559442 0.453803 0.448554 0.326848 0.4 0.4 0.4 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 7) 0 1 Xk
(\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 7)
Pc
0.912474 0.787625 0.619837 0.97467 0 0 0 Xa
(R=0 G=0 B=0)
Pc
0.762295 0.667414 0.60705 0.828763 0.101961 0.101961 0.101961 Xa
(R=26 G=26 B=26)
Pc
0.690578 0.595209 0.559747 0.655817 0.2 0.2 0.2 Xa
(R=51 G=51 B=51)
Pc
0.620386 0.5234 0.503532 0.47776 0.301961 0.301961 0.301961 Xa
(R=77 G=77 B=77)
Pc
0.559442 0.453803 0.448554 0.326848 0.4 0.4 0.4 Xa
(R=102 G=102 B=102)
Pc
0.492378 0.386633 0.38529 0.202182 0.501961 0.501961 0.501961 Xa
(R=128 G=128 B=128)
Pc
0.410864 0.319738 0.323857 0.110109 0.6 0.6 0.6 Xa
(R=153 G=153 B=153)
Pc
0.32575 0.244968 0.255344 0.043549 0.701961 0.701961 0.701961 Xa
(R=179 G=179 B=179)
Pc
0.231479 0.170962 0.180972 0.008301 0.8 0.8 0.8 Xa
(R=204 G=204 B=204)
Pc
0.11664 0.082246 0.092653 0.000031 0.901961 0.901961 0.901961 Xa
(R=230 G=230 B=230)
Pc
0.062196 0.043153 0.05127 0.000031 0.94902 0.94902 0.94902 Xa
(R=242 G=242 B=242)
Pc
0.663355 0.223545 0.000031 0.000031 0.247059 0.662745 0.960784 Xa
(R=63 G=169 B=245)
Pc
0.570642 0.000031 0.870939 0.000031 0.478431 0.788235 0.262745 Xa
(R=122 G=201 B=67)
Pc
0.000031 0.510887 0.883848 0.000031 1 0.576471 0.117647 Xa
(R=255 G=147 B=30)
Pc
0.000031 0.917174 0.796658 0.000031 1 0.113725 0.145098 Xa
(R=255 G=29 B=37)
Pc
0.000031 0.654047 0.033753 0.000031 1 0.482353 0.67451 Xa
(R=255 G=123 B=172)
Pc
0.305303 0.140902 0.144472 0.002777 0.741176 0.8 0.831373 Xa
(R=189 G=204 B=212)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(\321\353\356\351 1) Ln
0 A
0 O
0.559442 0.453803 0.448554 0.326848 0.4 0.4 0.4 (\715\756\742\773\751 \756\741\760\740\747\745\766 \766\742\745\762\740 7) 0 1 Xk
0 J 0 j 1 w 10 M []0 d1 XR
2767.9688 -1907.541 m
2753.0479 -1925.3682 2746.6445 -1946.9648 2746.6445 -1969.7969 c
2746.6445 -2087.7881 l
2746.6445 -2097.6367 2744.4902 -2106.6338 2737.1406 -2113.9883 c
2726.2637 -2124.8652 2709.5488 -2126.4063 2697.0313 -2118.5938 c
2675.9297 -2105.4131 2676.8945 -2074.1504 2698.9863 -2062.4004 c
2705.915 -2058.7061 2712.4141 -2058.6084 2719.8213 -2058.6084 c
2719.8213 -1999.4141 l
2715.8662 -1999.4141 l
2690.7559 -1999.4141 2667.2822 -2008.3672 2649.3965 -2026.2451 c
2613.6426 -2062.002 2613.6484 -2120.1045 2649.3965 -2155.8496 c
2687.2754 -2193.7246 2749.9258 -2191.1777 2784.5283 -2149.832 c
2798.9648 -2132.5586 2805.8457 -2110.9629 2805.8457 -2088.4775 c
2805.8457 -1967.7891 l
2805.8457 -1952.3936 2815.3955 -1938.8281 2829.8047 -1934.9609 c
2834.123 -1933.8115 2838.6348 -1933.6074 2843.0498 -1934.1641 c
2874.0479 -1938.1113 2880.8223 -1980.4336 2853.498 -1994.9688 c
2849.3008 -1997.1982 2844.6191 -1998.4805 2839.8652 -1998.7129 c
2837.4844 -1998.8203 2835.0723 -1998.749 2832.6836 -1998.749 c
2832.6836 -2057.9561 l
2837.4902 -2057.9561 l
2838.5508 -2057.9561 2839.5986 -2057.9561 2840.6582 -2057.9307 c
2865.0234 -2057.3027 2887.0254 -2047.1758 2903.0928 -2031.1143 c
2938.8496 -1995.3564 2938.8457 -1937.2637 2903.0928 -1901.5098 c
2865.2207 -1863.6318 2802.5625 -1866.1738 2767.9688 -1907.541 c
2767.9688 -1907.541 l
f
*u
1286.2549 -1137.2705 m
1375.1025 -1137.2705 1447.1597 -1192.3662 1447.1597 -1260.3008 c
1447.1597 -1305.4922 1415.2627 -1344.9854 1367.7598 -1366.3765 c
1367.3843 -1369.8838 1367.1929 -1373.4448 1367.1929 -1377.0479 c
1367.1929 -1390.626 1369.916 -1403.5684 1374.8374 -1415.3599 c
1376.1997 -1418.6367 1375.1055 -1423.8145 1372.2539 -1427.0981 c
1369.2378 -1430.5732 1364.1318 -1431.1851 1360.6709 -1430.3926 c
1333.3477 -1424.147 1310.3086 -1406.6582 1296.6675 -1383.0625 c
1293.2246 -1383.2314 1289.7539 -1383.3223 1286.2549 -1383.3223 c
1197.4058 -1383.3223 1125.3506 -1328.2271 1125.3506 -1260.3008 c
1125.3506 -1192.3662 1197.4058 -1137.2705 1286.2549 -1137.2705 c
1286.2549 -1137.2705 l
f
1359.2441 -1236.5889 m
1372.3389 -1236.5889 1382.959 -1247.2051 1382.959 -1260.3008 c
1382.959 -1273.3882 1372.3389 -1284.0107 1359.2441 -1284.0107 c
1346.1533 -1284.0107 1335.5371 -1273.3882 1335.5371 -1260.3008 c
1335.5371 -1247.2051 1346.1533 -1236.5889 1359.2441 -1236.5889 c
1359.2441 -1236.5889 l
f
1213.2627 -1236.5889 m
1226.353 -1236.5889 1236.9736 -1247.2051 1236.9736 -1260.3008 c
1236.9736 -1273.3882 1226.353 -1284.0107 1213.2627 -1284.0107 c
1200.1685 -1284.0107 1189.5513 -1273.3882 1189.5513 -1260.3008 c
1189.5513 -1247.2051 1200.1685 -1236.5889 1213.2627 -1236.5889 c
1213.2627 -1236.5889 l
f
1286.252 -1236.5889 m
1299.3472 -1236.5889 1309.9629 -1247.2051 1309.9629 -1260.3008 c
1309.9629 -1273.3882 1299.3472 -1284.0107 1286.252 -1284.0107 c
1273.1626 -1284.0107 1262.542 -1273.3882 1262.542 -1260.3008 c
1262.542 -1247.2051 1273.1626 -1236.5889 1286.252 -1236.5889 c
1286.252 -1236.5889 l
f
*U
*u
1 D
2720.1895 -396.2324 m
2633.1729 -483.25 l
2622.9199 -493.5039 2622.9199 -510.2856 2633.1729 -520.5454 c
2646.6104 -533.9785 l
2646.6904 -530.417 l
2646.9082 -520.1211 2650.3369 -510.189 2658 -502.5269 c
2665.4033 -495.127 2675.5674 -491.2383 2685.833 -491.2383 c
2712.9482 -491.2383 l
2723.5713 -491.2383 2733.9375 -494.7939 2741.6787 -502.5342 c
2741.6787 -502.625 l
2749.0605 -510.0137 2752.9727 -520.1758 2752.9727 -530.4229 c
2752.9727 -533.9785 l
2756.5156 -533.9785 l
2766.8223 -533.9785 2776.999 -537.9521 2784.4248 -545.3701 c
2792.1992 -553.1533 2795.7139 -563.5088 2795.7139 -574.1748 c
2795.7139 -600.083 l
2795.7139 -610.8213 2792.166 -621.209 2784.3291 -629.0449 c
2776.6895 -636.6826 2766.4121 -640.3462 2755.9004 -640.3462 c
2752.9727 -640.3462 l
2797.0186 -684.3872 l
2811.0059 -698.3716 2834.3662 -684.77 2829.1543 -665.5586 c
2807.8086 -586.7593 l
2805.0957 -576.7603 2814.1797 -568.2866 2823.6445 -570.8667 c
2902.4873 -592.3257 l
2912.9941 -595.1899 2922.7031 -588.9155 2925.8135 -580.3633 c
2928.2412 -573.7085 2927.0869 -565.8281 2921.334 -560.0752 c
2757.4854 -396.2324 l
2747.2334 -385.9731 2730.4502 -385.9731 2720.1895 -396.2324 c
2720.1895 -396.2324 l
f
0 D
2642.3867 -557.834 m
2670.4697 -557.834 l
2670.4697 -529.7578 l
2670.4697 -521.6899 2677.0645 -515.0942 2685.1309 -515.0942 c
2714.4561 -515.0942 l
2722.5166 -515.0942 2729.1172 -521.6899 2729.1172 -529.7578 c
2729.1172 -557.834 l
2757.1953 -557.834 l
2765.2627 -557.834 2771.8564 -564.4351 2771.8564 -572.4971 c
2771.8564 -601.8223 l
2771.8564 -609.8892 2765.2627 -616.4902 2757.1953 -616.4902 c
2729.1172 -616.4902 l
2729.1172 -644.5679 l
2729.1172 -652.6343 2722.5166 -659.2295 2714.4561 -659.2295 c
2685.1309 -659.2295 l
2677.0645 -659.2295 2670.4697 -652.6343 2670.4697 -644.5679 c
2670.4697 -616.4902 l
2642.3867 -616.4902 l
2634.3154 -616.4902 2627.7227 -609.8892 2627.7227 -601.8223 c
2627.7227 -572.4971 l
2627.7227 -564.4351 2634.3154 -557.834 2642.3867 -557.834 c
2642.3867 -557.834 l
f
*U
*u
1945.6494 -372.1475 m
2116.7891 -372.1475 l
2139.9727 -372.1475 2158.9414 -391.1089 2158.9414 -414.2925 c
2158.9414 -664.3726 l
2158.9414 -687.5547 2139.9727 -706.5244 2116.7891 -706.5244 c
1945.6494 -706.5244 l
1922.4648 -706.5244 1903.4961 -687.5547 1903.4961 -664.3726 c
1903.4961 -414.2925 l
1903.4961 -391.1089 1922.4648 -372.1475 1945.6494 -372.1475 c
1945.6494 -372.1475 l
f
2031.2188 -642.3149 m
2043.6875 -642.3149 2053.8037 -652.4292 2053.8037 -664.8979 c
2053.8037 -677.3623 2043.6875 -687.4766 2031.2188 -687.4766 c
2018.748 -687.4766 2008.6426 -677.3623 2008.6426 -664.8979 c
2008.6426 -652.4292 2018.748 -642.3149 2031.2188 -642.3149 c
2031.2188 -642.3149 l
f
1963.4365 -415.5352 m
2099.001 -415.5352 l
2108.3223 -415.5352 2115.9473 -423.1592 2115.9473 -432.48 c
2115.9473 -606.3223 l
2115.9473 -615.6421 2108.3223 -623.2676 2099.001 -623.2676 c
1963.4365 -623.2676 l
1954.1152 -623.2676 1946.4902 -615.6421 1946.4902 -606.3223 c
1946.4902 -432.48 l
1946.4902 -423.1592 1954.1152 -415.5352 1963.4365 -415.5352 c
1963.4365 -415.5352 l
f
*U
*u
564.7676 -2632.3203 m
629.6685 -2632.3203 682.3008 -2684.9521 682.3008 -2749.8516 c
682.3008 -2814.7539 629.6685 -2867.3799 564.7676 -2867.3799 c
544.6973 -2867.3799 525.8066 -2862.3418 509.2759 -2853.4727 c
509.2993 -2853.4883 l
455.4536 -2907.335 l
446.0508 -2916.7363 430.666 -2916.7363 421.2632 -2907.335 c
407.9692 -2894.0371 l
398.5688 -2884.6348 398.5688 -2869.2539 407.9692 -2859.8535 c
461.6172 -2806.207 l
452.4507 -2789.4736 447.2368 -2770.2744 447.2368 -2749.8516 c
447.2368 -2684.9521 499.8672 -2632.3203 564.7676 -2632.3203 c
564.7676 -2632.3203 l
f
564.7676 -2673.8496 m
606.7329 -2673.8496 640.7666 -2707.8887 640.7666 -2749.8516 c
640.7666 -2791.8164 606.7329 -2825.8467 564.7676 -2825.8467 c
522.7998 -2825.8467 488.7705 -2791.8164 488.7705 -2749.8516 c
488.7705 -2707.8887 522.7998 -2673.8496 564.7676 -2673.8496 c
564.7676 -2673.8496 l
f
*U
*u
1914.4883 -1139.6812 m
1918.8604 -1137.1553 1923.1533 -1134.333 1927.7529 -1132.2256 c
1944.7344 -1124.4419 1964.915 -1129.689 1975.9824 -1144.6353 c
1979.8906 -1149.916 1981.8965 -1155.8809 1983.5361 -1162.1934 c
1985.6895 -1170.4839 1992.0342 -1194.5337 1992.7861 -1197.8516 c
1996.498 -1214.3125 1989.3262 -1231.9678 1973.9492 -1240.8467 c
1970.8408 -1242.6455 1967.6631 -1244.2925 1964.2852 -1244.8442 c
1960.5234 -1245.4614 1941.4629 -1254.1152 1947.791 -1276.8945 c
1952.0615 -1286.9048 1956.9814 -1296.7651 1962.5586 -1306.4253 c
1967.8994 -1315.6909 1973.7129 -1324.5151 1979.9385 -1332.897 c
1980.3828 -1333.3335 l
1996.9395 -1350.2119 2013.9697 -1338.0273 2016.3896 -1335.0776 c
2018.5469 -1332.4297 2021.5732 -1330.499 2024.6738 -1328.7051 c
2040.0547 -1319.8281 2058.9336 -1322.4443 2071.3242 -1333.8965 c
2073.8242 -1336.2051 2091.4805 -1353.7251 2097.584 -1359.7314 c
2102.2305 -1364.2993 2106.3965 -1369.0215 2109.0137 -1375.0493 c
2116.4316 -1392.1094 2110.873 -1412.2109 2095.6475 -1423.0283 c
2091.5273 -1425.9531 2086.9326 -1428.2607 2082.5605 -1430.7861 c
2061.4414 -1442.9849 2036.25 -1441.7715 2016.8486 -1429.7979 c
1977.2803 -1406.8022 1943.0146 -1373.4746 1918.4912 -1331.0068 c
1893.4805 -1287.6797 1881.7793 -1240.3149 1882.1113 -1193.6436 c
1882.2686 -1171.98 1895.9629 -1150.376 1914.4883 -1139.6812 c
1914.4883 -1139.6812 l
f
2160.0869 -1244.4131 m
2171.2588 -1244.4131 2180.3262 -1253.4736 2180.3262 -1264.6479 c
2180.3262 -1275.8228 2171.2588 -1284.8887 2160.0869 -1284.8887 c
2148.9111 -1284.8887 2139.8525 -1275.8228 2139.8525 -1264.6479 c
2139.8525 -1253.4736 2148.9111 -1244.4131 2160.0869 -1244.4131 c
2160.0869 -1244.4131 l
f
2097.2715 -1244.4131 m
2108.4434 -1244.4131 2117.5098 -1253.4736 2117.5098 -1264.6479 c
2117.5098 -1275.8228 2108.4434 -1284.8887 2097.2715 -1284.8887 c
2086.0938 -1284.8887 2077.0371 -1275.8228 2077.0371 -1264.6479 c
2077.0371 -1253.4736 2086.0938 -1244.4131 2097.2715 -1244.4131 c
2097.2715 -1244.4131 l
f
2034.4521 -1244.4131 m
2045.627 -1244.4131 2054.6885 -1253.4736 2054.6885 -1264.6479 c
2054.6885 -1275.8228 2045.627 -1284.8887 2034.4521 -1284.8887 c
2023.2793 -1284.8887 2014.2188 -1275.8228 2014.2188 -1264.6479 c
2014.2188 -1253.4736 2023.2793 -1244.4131 2034.4521 -1244.4131 c
2034.4521 -1244.4131 l
f
*U
*u
2169.0078 -2025.3965 m
2156.082 -2097.3584 2109.6719 -2157.7148 2046.4922 -2189.7783 c
2035.1982 -2195.5059 2025.3389 -2194.6543 2014.1748 -2188.8682 c
1953.8486 -2157.6055 1909.1221 -2100.4121 1894.7393 -2032.0459 c
1891.5664 -2016.9541 1889.9102 -2001.5469 1889.8027 -1986.127 c
1889.7861 -1983.4629 1889.7959 -1982.7109 1889.7959 -1978.7617 c
1889.8066 -1929.6445 l
1889.8066 -1917.5098 1895.5439 -1907.5527 1905.7393 -1900.8994 c
1941.2578 -1877.7422 1983.5674 -1864.127 2029.0332 -1863.7031 c
2031.0732 -1863.6914 2033.0342 -1863.6914 2035.1211 -1863.7285 c
2080.2324 -1864.4795 2122.1904 -1878.2275 2157.415 -1901.374 c
2167.3604 -1907.9033 2172.6455 -1917.8096 2172.6455 -1929.6211 c
2172.6455 -1977.6982 l
2172.6455 -1993.7559 2171.8613 -2009.542 2169.0078 -2025.3965 c
2169.0078 -2025.3965 l
f
1 D
2031.2188 -2165.3125 m
2032.127 -2165.3457 2033.0225 -2165.2012 2033.877 -2164.7656 c
2073.1572 -2144.8408 2105.4092 -2111.9414 2124.5654 -2072.3564 c
2131.8994 -2057.1914 2137.0234 -2041.4941 2140.25 -2025.3965 c
2043.5801 -2025.3965 l
2037.0088 -2025.3965 2031.625 -2030.5205 2031.2188 -2036.998 c
2031.2188 -2165.3125 l
2031.2188 -2165.3125 l
f
1922.1367 -2025.3965 m
2018.8633 -2025.3965 l
2025.6777 -2025.3711 2031.1934 -2019.8359 2031.1934 -2013.0186 c
2031.1934 -1891.7695 l
2002.9824 -1891.8057 1974.7559 -1897.6309 1949.0391 -1909.0898 c
1939.9082 -1913.1621 1931.1074 -1917.9072 1922.6758 -1923.2871 c
1918.8428 -1925.7324 1917.7842 -1927.1367 1917.7842 -1930.8701 c
1917.7715 -1984.457 l
1917.8193 -1997.96 1918.8857 -2012.2432 1922.1367 -2025.3965 c
1922.1367 -2025.3965 l
f
*U
0 D
688.3105 -1255.6733 m
688.3398 -1267.5728 677.1348 -1279.4741 665.0464 -1279.4434 c
580.2173 -1279.2622 l
566.9331 -1279.2314 560.2837 -1262.4492 569.6099 -1253.1221 c
594.6328 -1228.0781 l
594.1016 -1227.5352 593.5605 -1226.9897 593.0122 -1226.4575 c
583.5215 -1217.2334 571.6084 -1210.2256 557.9136 -1206.5542 c
515.1396 -1195.0898 471.168 -1220.478 459.7061 -1263.2544 c
448.2437 -1306.0313 473.6313 -1350.0059 516.4048 -1361.4648 c
543.3071 -1368.6719 570.6816 -1361.3018 590.1445 -1344.2041 c
590.938 -1343.5078 591.7163 -1342.7993 592.4795 -1342.0713 c
594.0049 -1340.2432 595.7349 -1338.6138 597.6182 -1337.1973 c
605 -1331.6431 614.769 -1329.4141 624.3857 -1331.9951 c
640.9814 -1336.4395 650.833 -1353.4946 646.3867 -1370.0889 c
645.5293 -1373.2861 644.2065 -1376.23 642.5107 -1378.8652 c
639.4429 -1383.6436 634.7637 -1387.6289 630.5068 -1391.3223 c
596.0249 -1421.2588 547.7676 -1434.0928 500.3477 -1421.3867 c
424.4883 -1401.061 379.4531 -1323.0615 399.7803 -1247.1992 c
420.1094 -1171.3379 498.1113 -1126.3032 573.9707 -1146.627 c
598.7778 -1153.2773 620.2847 -1166.0981 637.2881 -1182.9839 c
637.415 -1183.1113 638.5259 -1184.1523 638.4922 -1184.2437 c
645.2344 -1177.5083 652.8096 -1169.9448 661.9028 -1160.8843 c
671.7837 -1151.0239 688.1001 -1158.1108 688.1304 -1172.0645 c
688.3105 -1255.6733 l
688.3105 -1255.6733 l
f
*u
447.9194 -1964.5781 m
507.7617 -1904.9961 l
519.4941 -1893.3184 541.6392 -1901.0098 541.6367 -1919.0713 c
541.5845 -2138.2871 l
541.5786 -2157.2305 519.2388 -2163.7578 507.8076 -2152.375 c
448.0352 -2092.8496 l
448.0352 -2092.8496 l
411.0767 -2092.8496 l
394.2759 -2092.8496 380.5273 -2079.1055 380.5273 -2062.291 c
380.5273 -1995.126 l
380.5273 -1978.3271 394.2759 -1964.5781 411.0767 -1964.5781 c
447.9194 -1964.5781 l
447.9194 -1964.5781 l
f
648.2041 -1909.2842 m
704.1743 -1979.2832 704.1348 -2079.3574 648.0708 -2149.2979 c
647.4717 -2150.0488 646.8623 -2150.7139 646.1899 -2151.3818 c
638.9731 -2158.5986 627.2695 -2158.5986 620.0513 -2151.3818 c
613.4717 -2144.8018 612.8921 -2134.4971 618.3149 -2127.2539 c
618.6143 -2126.792 618.9849 -2126.3799 619.3271 -2125.9561 c
664.1714 -2069.7891 664.3979 -1989.7021 619.999 -1933.3027 c
619.0654 -1932.1152 618.1943 -1930.9785 617.4121 -1929.6807 c
613.1289 -1922.5723 614.0513 -1913.209 620.1782 -1907.0771 c
627.001 -1900.2598 637.8354 -1899.8838 645.0938 -1905.9648 c
646.2588 -1906.9336 647.3096 -1908.0605 648.2041 -1909.2842 c
648.2041 -1909.2842 l
f
599.7231 -2104.916 m
592.5078 -2112.1357 580.8022 -2112.1357 573.5859 -2104.916 c
567.9395 -2099.2725 566.7129 -2090.877 569.9028 -2084.0332 c
570.5244 -2082.7031 571.2661 -2081.4902 572.1001 -2080.2803 c
592.8911 -2050.1436 593.2388 -2010.1348 573.1377 -1979.6572 c
572.4971 -1978.6914 571.8325 -1977.7324 571.2002 -1976.7656 c
566.5396 -1969.5908 567.3521 -1959.915 573.6348 -1953.6289 c
580.8535 -1946.4092 592.5586 -1946.4092 599.7739 -1953.6289 c
600.8184 -1954.6689 601.6816 -1955.8203 602.5186 -1957.0205 c
632.2061 -1999.9727 632.4448 -2057.1406 603.2378 -2100.3145 c
602.1489 -2101.9229 601.106 -2103.5352 599.7231 -2104.916 c
599.7231 -2104.916 l
f
*U
*u
2753.4961 -2640.0322 m
2764.8398 -2628.6348 2786.9141 -2627.9668 2798.4395 -2639.5488 c
2879.3291 -2720.7871 l
2891.999 -2733.5117 2882.3115 -2755.8955 2864.4824 -2755.8955 c
2851.5781 -2755.8955 l
2844.4961 -2755.8955 2838.7559 -2761.6445 2838.7559 -2768.7188 c
2838.707 -2768.7188 l
2838.707 -2815.0713 l
2838.707 -2826.4688 2829.376 -2835.7988 2817.9766 -2835.7988 c
2734.3008 -2835.7988 l
2722.8965 -2835.7988 2713.5723 -2826.4688 2713.5723 -2815.0713 c
2713.5723 -2768.6992 l
2713.5332 -2768.6992 l
2713.5332 -2761.6133 2707.792 -2755.8721 2700.7129 -2755.8721 c
2688.1523 -2755.8535 l
2669.2813 -2755.8311 2660.4639 -2733.459 2673.7686 -2720.0967 c
2753.4961 -2640.0322 l
2753.4961 -2640.0322 l
f
1 D
2733.1094 -2915.5322 m
2819.2051 -2915.5322 l
2829.9756 -2915.5322 2838.7861 -2906.7129 2838.7861 -2895.9453 c
2838.7861 -2880.7607 l
2838.7861 -2869.9922 2829.9678 -2861.1787 2819.2051 -2861.1787 c
2733.1094 -2861.1787 l
2722.3408 -2861.1787 2713.5273 -2869.9922 2713.5273 -2880.7607 c
2713.5273 -2887.5508 l
2713.5273 -2895.9453 l
2713.5273 -2906.7168 2722.3408 -2915.5322 2733.1094 -2915.5322 c
2733.1094 -2915.5322 l
f
*U
0 D
674.2852 -604.5649 m
600.3335 -571.9697 l
588.9126 -566.9375 588.8208 -552.6021 588.7871 -547.0176 c
588.7871 -546.9502 588.7871 -546.0239 588.7715 -546.0239 c
597.1782 -535.9409 603.8315 -523.2041 608.0293 -508.7847 c
608.208 -508.8198 608.3892 -508.8501 608.5737 -508.8682 c
616.1318 -509.6558 623.7544 -495.9688 625.5942 -478.3091 c
627.2642 -462.3008 623.6113 -448.5107 617.2861 -445.4766 c
616.6436 -445.1738 615.957 -444.8892 615.2329 -444.8892 c
614.001 -405.293 581.4985 -373.5576 541.606 -373.5576 c
502.6475 -373.5576 470.7456 -403.8213 468.124 -442.1216 c
468.1084 -442.333 467.9844 -444.8892 467.9814 -444.8892 c
460.4214 -445.6826 455.7813 -460.6421 457.6211 -478.3091 c
459.4634 -495.9688 467.0854 -509.6558 474.6465 -508.8682 c
474.8311 -508.8501 475.0132 -508.8198 475.1938 -508.7847 c
479.3257 -522.9795 485.8389 -535.541 494.0576 -545.5522 c
494.0938 -545.5938 494.4502 -546.0239 494.4414 -546.0239 c
494.3604 -550.6519 495.0688 -566.604 482.8857 -571.9697 c
408.9341 -604.5649 l
400.6167 -608.229 377.166 -618.8521 377.166 -641.5391 c
377.166 -660.1626 l
377.166 -668.2666 383.7949 -674.8984 391.8984 -674.8984 c
491.708 -674.8984 591.5156 -674.8984 691.3213 -674.8984 c
699.4253 -674.8984 706.0576 -668.2725 706.0576 -660.1626 c
706.0576 -652.3867 l
706.0576 -641.5391 l
706.0576 -618.8521 682.6045 -608.229 674.2852 -604.5649 c
674.2852 -604.5649 l
f
*u
1286.252 -359.9297 m
1356.0615 -359.9297 1412.6733 -416.5449 1412.6733 -486.3521 c
1412.6733 -528.5942 1391.939 -565.999 1360.0981 -588.958 c
1360.0317 -589.0063 1359.3438 -589.4971 1359.3535 -589.4971 c
1304.5342 -708.2266 l
1297.6118 -723.2148 1274.1836 -721.4707 1267.7061 -707.4619 c
1213.1621 -589.4971 l
1180.8975 -566.5923 1159.8359 -528.9272 1159.8359 -486.3521 c
1159.8359 -416.5449 1216.4473 -359.9297 1286.252 -359.9297 c
1286.252 -359.9297 l
f
1286.252 -413.2515 m
1326.6182 -413.2515 1359.3535 -445.9849 1359.3535 -486.3521 c
1359.3535 -526.7173 1326.6182 -559.4512 1286.252 -559.4512 c
1245.8882 -559.4512 1213.1533 -526.7173 1213.1533 -486.3521 c
1213.1533 -445.9849 1245.8882 -413.2515 1286.252 -413.2515 c
1286.252 -413.2515 l
f
*U
*u
2868.584 -1135.9868 m
2924.3145 -1191.7173 l
2936.0898 -1203.4839 2936.0898 -1222.7441 2924.3145 -1234.5122 c
2913.6172 -1245.207 l
2907.7285 -1251.0928 2898.1035 -1251.0928 2892.2207 -1245.207 c
2815.0938 -1168.0796 l
2809.207 -1162.1934 2809.207 -1152.5684 2815.0938 -1146.6826 c
2825.7891 -1135.9868 l
2837.5557 -1124.2197 2856.8145 -1124.2197 2868.584 -1135.9868 c
2868.584 -1135.9868 l
f
2801.2266 -1190.1543 m
2870.1875 -1259.1182 l
2878.3232 -1267.2461 2878.3232 -1280.5527 2870.1875 -1288.6792 c
2772.4463 -1386.4229 l
2770.5078 -1388.3677 2768.2656 -1389.8394 2765.8799 -1390.8564 c
2765.2813 -1391.1045 2764.6758 -1391.3291 2764.0586 -1391.5293 c
2664.3965 -1424.9419 l
2661.3467 -1425.6201 l
2645.9072 -1429.0537 2631.2061 -1416.0747 2634.5039 -1399.6313 c
2635.2031 -1396.5801 l
2668.5303 -1297.0552 l
2669.6689 -1293.6523 2671.3135 -1290.5078 2673.9189 -1287.8994 c
2771.666 -1190.1543 l
2779.7979 -1182.021 2793.0957 -1182.021 2801.2266 -1190.1543 c
2801.2266 -1190.1543 l
f
1 D
2732.1826 -1375.7153 m
2684.6289 -1328.1611 l
2670.1602 -1369.853 l
2690.4912 -1390.1836 l
2732.1826 -1375.7153 l
2732.1826 -1375.7153 l
f
*U
*u
0 D
1915.0215 -2774.7021 m
1912.2412 -2775.6484 1909.2627 -2776.1611 1906.168 -2776.1611 c
1890.9619 -2776.1611 1878.627 -2763.8311 1878.627 -2748.623 c
1878.627 -2740.2656 1882.3662 -2732.7686 1888.2529 -2727.7168 c
2011.5713 -2604.4053 l
2022.3262 -2593.6465 2040.1084 -2593.6465 2050.8623 -2604.4053 c
2174.1875 -2727.7168 l
2180.0723 -2732.7686 2183.8086 -2740.2656 2183.8086 -2748.623 c
2183.8086 -2763.8311 2171.4795 -2776.1611 2156.2773 -2776.1611 c
2153.1748 -2776.1611 2150.1963 -2775.6484 2147.415 -2774.7021 c
2147.3086 -2774.6699 l
2147.3086 -2774.7256 l
2147.3086 -2885.957 l
2147.3086 -2901.2734 2134.7793 -2913.8096 2119.46 -2913.8096 c
1943.0742 -2913.8096 l
1927.7588 -2913.8096 1915.2207 -2901.2793 1915.2207 -2885.957 c
1915.2207 -2774.6328 l
1915.1543 -2774.6523 1915.0889 -2774.6777 1915.0215 -2774.7021 c
1915.0215 -2774.7021 l
f
1 D
2013.5176 -2768.5781 m
2048.9277 -2768.5781 l
2055.4219 -2768.5781 2060.7314 -2773.8965 2060.7314 -2780.3828 c
2060.7314 -2867.3281 l
2088.7734 -2867.3281 l
2095.2461 -2867.3281 2100.5449 -2862.0322 2100.5449 -2855.5605 c
2100.5449 -2750.918 l
2103.998 -2751.7725 2108.3799 -2751.4336 2111.9492 -2747.8652 c
2116.5283 -2743.2861 2116.5283 -2735.7881 2111.9492 -2731.2168 c
2039.6143 -2658.8711 l
2035.0361 -2654.2939 2027.5449 -2654.2939 2022.957 -2658.8711 c
1950.5664 -2731.2637 l
1945.9873 -2735.8496 1945.9941 -2743.3418 1950.5664 -2747.9229 c
1953.7578 -2751.1104 1958.2031 -2751.9756 1962.0303 -2750.9922 c
1962.0303 -2855.5605 l
1962.0303 -2862.0322 1967.3242 -2867.3281 1973.8047 -2867.3281 c
2001.7139 -2867.3281 l
2001.7139 -2780.3828 l
2001.7139 -2773.8906 2007.0244 -2768.5781 2013.5176 -2768.5781 c
2013.5176 -2768.5781 l
f
*U
*u
1262.5981 -2938.1328 m
1274.3945 -2949.9824 1297.3525 -2950.6748 1309.3369 -2938.6357 c
1393.4453 -2854.1621 l
1406.6172 -2840.9277 1396.5488 -2817.6465 1378.0107 -2817.6465 c
1364.5928 -2817.6465 l
1357.2305 -2817.6465 1351.2593 -2811.6768 1351.2593 -2804.3174 c
1351.2046 -2804.3174 l
1351.2046 -2771.0791 l
1351.2046 -2759.2285 1341.501 -2749.5254 1329.6509 -2749.5254 c
1242.6406 -2749.5254 l
1230.7856 -2749.5254 1221.0835 -2759.2227 1221.0835 -2771.0791 c
1221.0835 -2804.3418 l
1221.0483 -2804.3418 l
1221.0483 -2811.7051 1215.0791 -2817.6777 1207.7134 -2817.6777 c
1194.6504 -2817.6934 l
1175.0293 -2817.7178 1165.8613 -2840.9834 1179.6982 -2854.875 c
1262.5981 -2938.1328 l
1262.5981 -2938.1328 l
f
0 D
1241.4033 -2599.3652 m
1330.9248 -2599.3652 l
1342.126 -2599.3652 1351.2861 -2608.5352 1351.2861 -2619.7246 c
1351.2861 -2621.7012 l
1351.2861 -2632.8906 1342.1172 -2642.0615 1330.9248 -2642.0615 c
1241.4033 -2642.0615 l
1230.208 -2642.0615 1221.0376 -2632.8984 1221.0376 -2621.7012 c
1221.0376 -2619.7246 l
1221.0376 -2608.5293 1230.2021 -2599.3652 1241.4033 -2599.3652 c
1241.4033 -2599.3652 l
f
1241.4033 -2666.6133 m
1330.9248 -2666.6133 l
1342.126 -2666.6133 1351.2861 -2675.7832 1351.2861 -2686.9766 c
1351.2861 -2702.7705 l
1351.2861 -2713.9639 1342.1201 -2723.1299 1330.9248 -2723.1299 c
1241.4033 -2723.1299 l
1230.2051 -2723.1299 1221.0376 -2713.9697 1221.0376 -2702.7705 c
1221.0376 -2686.9766 l
1221.0376 -2675.7773 1230.2021 -2666.6133 1241.4033 -2666.6133 c
1241.4033 -2666.6133 l
f
*U
*u
1193.8828 -1943.8408 m
1194.2334 -1943.8525 1194.1304 -1943.3076 1194.167 -1943.0059 c
1199.5513 -1899.2305 1236.8701 -1865.3154 1282.0977 -1865.3154 c
1318.6006 -1865.3154 1349.9453 -1887.4072 1363.5205 -1918.9375 c
1364.3926 -1918.9033 1365.27 -1918.8896 1366.1519 -1918.8896 c
1410.3579 -1918.8896 1446.2056 -1954.7305 1446.2056 -1998.9434 c
1446.2056 -2043.1406 1410.3579 -2078.9941 1366.1519 -2078.9941 c
1359.5146 -2078.9941 l
1351.9814 -2078.7656 1348.7515 -2072.0303 1348.7515 -2067.7676 c
1348.7485 -2025.6387 l
1348.7485 -2011.1875 1336.9268 -1999.3662 1322.4795 -1999.3662 c
1237.5327 -1999.3662 l
1223.0884 -1999.3662 1211.2637 -2011.1875 1211.2637 -2025.6387 c
1211.2637 -2068.1055 l
1211.2637 -2074.417 1206.2246 -2078.9941 1200.1738 -2078.9941 c
1193.8828 -2078.9941 l
1156.5684 -2078.9941 1126.3047 -2048.7402 1126.3047 -2011.418 c
1126.3047 -1974.1113 1156.5654 -1943.8408 1193.8828 -1943.8408 c
1193.8828 -1943.8408 l
f
1300.0825 -2183.6543 m
1289.1997 -2194.5879 1271.3262 -2195.082 1259.9482 -2183.6543 c
1208.3564 -2131.8428 l
1197.957 -2121.3906 1204.7129 -2102.0459 1221.0483 -2102.0459 c
1234.0864 -2102.0459 l
1234.0864 -2039.3975 l
1234.0864 -2029.7451 1241.9844 -2021.8477 1251.6357 -2021.8477 c
1308.3838 -2021.8477 l
1318.0332 -2021.8477 1325.9302 -2029.7451 1325.9302 -2039.3975 c
1325.9336 -2102.0459 l
1338.9858 -2102.0459 l
1355.3174 -2102.0459 1362.0762 -2121.3906 1351.6748 -2131.8428 c
1300.0825 -2183.6543 l
1300.0825 -2183.6543 l
f
*U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
